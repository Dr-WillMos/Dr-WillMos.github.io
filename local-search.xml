<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《战争之王》：必须存在的恶魔</title>
    <link href="/posts/Lord_of_War/"/>
    <url>/posts/Lord_of_War/</url>
    
    <content type="html"><![CDATA[<h2 id="矛盾与荒谬并行的世界"><a href="#矛盾与荒谬并行的世界" class="headerlink" title="矛盾与荒谬并行的世界"></a>矛盾与荒谬并行的世界</h2><blockquote><p> “可能对你来说我是一个恶魔，但不幸的是，我是一个必须存在的恶魔。”              ——尤里</p></blockquote><p>​       尤里的发迹史堪称全球化时代的资本寓言。从基辅餐馆的潦倒移民到掌控全球地下军火贸易的”战争之王”，他的成功轨迹完美契合新自由主义经济法则。几十本护照和假身份帮助他在边境畅通无阻；把武装直升机的武器和本体分开运输，就成了<strong>“人道主义”</strong>救援直升机；面对到来的国际刑警，自己的船名可以随时随地变换；赶上了冷战结束的黄金时代，他立马将那些没有敌人的优良武器收入囊中，从简易的AK47到厚重的装甲车，他是这些穷途末路的将军最好的生意伙伴，也是非洲军阀最好的供应商。</p><p>​       很显然，尤里背后的大权加冕的大人物不想放弃这位<strong>干净利索</strong>的棋子，这就是为什么最后的尤里在铁证如山的情况下仍不会在军事法庭待上一秒。而这些大人物，可能上一秒还在联合国会议上慷慨激昂地控诉着战争俘虏受到了非人道的虐待，发誓要为非洲的战乱和贫穷负责，下一秒就默许自己的手下继续这场黑暗且宏伟的地下军火交易。因为他们需要战争，而目的可以是五花八门的。</p><blockquote><p>我们需要战争，而不需要敌人。</p></blockquote><p>​     战争可以被用来解决国内供大于求的问题，可以将人民的矛头不再对准统治阶级，也可以使得小国愿意为军火拿出自己几十年来积累的财富，而这些财富大多流入了<strong>”政治家“</strong>及其背后资本的腰包。这就是这个世界的矛盾所在，每个掌权者都想让世界更好，但在那之前，更重要的是不计手段地来进行财产转移，让自己的国家更富有，强大，最后是霸权。所以像尤里这样的恶魔必不可少，一旦他良心发现，<strong>就会有下一个更彻底的恶魔替代他。</strong></p><h2 id="满腔热血无法抵抗时代的洪流"><a href="#满腔热血无法抵抗时代的洪流" class="headerlink" title="满腔热血无法抵抗时代的洪流"></a>满腔热血无法抵抗时代的洪流</h2><p>​     影片中，国际刑警杰克没有尤里说的<strong>”价码“</strong>，他秉持自己的正义，坚持合法地惩罚尤里。可就是这么一个尽职尽责的好警察，最后在强权之下也没有任何办法。他的顶头上司，美国总统一直是这种交易的常客，他需要尤里这样的人才武装非洲的军阀，从暗中操作的战争中赚得盆满钵满。</p><blockquote><p>要是没有我，他们根本无法打一场像样的战争。                                        ——尤里</p></blockquote><p>​    杰克最后可能会愤怒，会感叹于世间的不公，甚至威胁辞职，但这些都不重要了，因为<strong>个体善恶在系统惯性面前微不足道。</strong>尤里和他的博弈，赌注从来都不是下半生的自由，而是仅存的<strong>良心</strong>。在政客的眼中，杰克的职责就在于努力去解这个顶头上司留下的谜题，而揭开谜底的过程，能够让世界看到包括<strong>联合国五常</strong>在内的联合国对<strong>维护世界和平的决心</strong>，<strong>至少看起来是这样。</strong></p><blockquote><p><strong>在系统性暴力中，个体的“生存智慧”恰恰是对战争机器的被动妥协</strong>。</p></blockquote><p>​      影片真正的恐怖不在于展现多少战争残酷，而在于揭示我们早已深陷其中却不自知的生存真相——在资本全球化的精密系统里，相比于成为战争的牺牲品，我们每个人都倾向于成为某种意义上的**”战争之王”**。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
      <tag>世界</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024这一年</title>
    <link href="/posts/2024/"/>
    <url>/posts/2024/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我的2024，被高考泾渭分明地划分为了两半</p><h2 id="1-6月"><a href="#1-6月" class="headerlink" title="1-6月"></a>1-6月</h2><p>我有个特点，一些令我感到痛苦的经历不会在我的记忆中存在太久。、</p><p>1月到6月，我已经记得不大清的，我直接的那段时间太阳很大，血红的标语贴的到处都是，我们披坚执锐，在数不清的模拟中挣扎，在无数次西西弗斯一般的努力中等待时间流逝，在那段时间，有因为一句无聊的笑话引发的快乐，有模拟考试名次渐进的喜悦，有深夜备战的痛苦，我只记得那时，全家人的期望都在我身上，我只记得我必须全力以赴，我只记得她已经不可挽回。</p><p>那个时期的自己有极度可怖的自律，献祭自己的心理和生理健康来夺取那几分，脑子里只知道<strong>卷</strong>，卷得天昏地暗，卷的不知疲倦，用尽了今天，又把希望寄托于明天。</p><blockquote><p>语文应该是一门很浪漫的学科，如果不是为了赶路，为了稳定的得分，也许我的文笔看起来就不会这么奇怪，可是，现在我记得的只有并列式和层进式的可悲的议论结构了。</p></blockquote><p>在自信与努力并存的等待中，我们迎来了最后的高考，不幸的是，这是我的死地。</p><p>我记不大清查分时的情景，我只记得我看到屏幕上的“675”（赋分制，对应大陆分数大概630左右），那时候脑子里只剩下震惊和麻木，随即就是懊悔。</p><p>后来，父母没对我多说什么，只是一个劲地安慰说没事，但我知道自己已经失败了，彻彻底底的失败。</p><blockquote><p>我们失败了。失败的意义就在于我们让所有人都感到失望，包括我们自己。    ——《超脱》</p></blockquote><p>后来，我在爸爸的手机里发现了他发给妈妈的语音，内容我记得不大清了，好像是说我三模考的一次比一次好，结果把最差的一次留给了高考。我麻木的思维在那是已经没有知觉了，只有我的心知道某个地方悄悄地碎掉了。</p><blockquote><p>我不大想写下去了，原谅我。</p></blockquote><p>抱着这般粉饰太平的冷静与坦然，这一切过的还算舒心。</p><h2 id="身后事"><a href="#身后事" class="headerlink" title="身后事"></a>身后事</h2><p>六月十八号，我们在家里给母亲庆祝生日，也许父母不是不喜欢吃蛋糕，他们喜欢的是过生日时的氛围和被给予的孩童时期的片刻的自由，至少那一个晚上，是属于我的母亲的。</p><p>那个蛋糕价格不低，可是父亲为了让她过上自打养小孩以来的第一次生日，倒也顾不上价格，那个晚上，天上的星旋转着，我们在家中欢庆，快乐且温暖。</p><p>七月二十九日，“接受”现实的我收到了杭电的通知书，那时我们全家都很高兴，可是只有我知道我的心有一处是空缺的，是破碎不堪的。</p><p>八月二日，我随母亲回广西。</p><p>？月？日，我记不清。</p><p>我把自己锁在这异国他乡的房间里，声嘶力竭地对着墙大吼，把所有的呼唤置之门外，把手机关机，让这个空间中只有一个手足无措的孩子的挣扎。当时占据头脑的不是愤怒，而是恐惧，是惶惶不可终日的痛苦，像是被宣判了死刑的囚徒，背着十字架在无人的荒漠中濒临绝望。</p><p>我记不清原因。</p><p>后来，这一切都结束了，时间按部就班地来到了开学的日子，任凭我如何懊悔。</p><p>我独自一人搭上了前往杭州的飞机，心里全是惊喜，不知道未来的生活是怎样的。</p><p>到了学校，我看见了高耸的楼宇，我看见了大城市的车水马龙，我看见了一个新的开始。</p><p><a href="https://imgse.com/i/pAxainS"><img src="https://s21.ax1x.com/2024/12/29/pAxainS.jpg" alt="pAxainS.jpg"></a></p><blockquote><p>拍摄于某个平静的下午</p></blockquote><p>………..</p><p>又过了几个月，我已记不清是什么时候。</p><p>我发现，大学的生活远远不如我所期待，“考上大学就轻松了”是一个彻头彻尾的谎言，所以，如果我看见有人旷课熬夜打游戏，我反倒认为这是正确的，他只不过是在实践自己在无数个地狱中赖以生存的信念罢了。高数和线代，两座大山，再加上教师难以接受的教学风格，作为大一新生的我实在很难跟上，我只记得学的懵懵懂懂，又带着这点一知半解参加了期中考，以68和77的成绩草草收场。</p><p>我在网上看了很多信息，知道了当前就业形势很不好，经济腾飞的副作用在这个时期显现出来。考研吗？现在学历贬值的厉害，统考人数不断下滑，机关对考研生不再感冒，考研之后到底是深造还是在啃老呢？卷竞赛吗？面对一群自从高中就有信息奥基础的人来说，我有任何优势吗？就这么扎扎实实地学习然后本科就业？学校教的过时的知识让我没了说话的底气。</p><blockquote><p>抱着这种迷茫，我一路写到了这里。</p></blockquote><ul><li>我试图让我的大学生活变得和高三一样，我试图复制应试背景下的成功。</li><li>我试图让我表面上的勤奋掩饰我迟于改变的懒惰。</li><li>我试图让曾经的机器取代现在的自己。</li></ul><p>翻找我的日记本，记忆如潮水般涌来。</p><p>我看见了曾经那个拥有无限可能的自己，他想参加OI而不带功利，不计后果，他想为心爱之人吹奏一支曲子而不在乎那人是否已经离去，他想……我看见在被高考招安之前的自己，像是一个燃烧的勇士，即使公主已经死去，他仍要把利剑刺入恶龙的咽喉。他是那么的意气风发，无所顾忌。</p><blockquote><p>我看见特工正处在明媚的阳光下和同事野餐，我看见他为了队里的新队员吹奏新曲，可我只发现我身处一片阴影之中，我与他样貌相似但没有色彩，我只是他的影子。</p></blockquote><p>高考已然成为历史，我也应该放过我自己，放过那个在缺氧环境下窒息的苦行僧。</p><p>我要重新学会畅快地呼吸，重新认识世界上的一切，重新和自己相识。</p><p>我要找回那个意气风发，从容不迫的自己。</p><blockquote><p>祝我好运</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扫雷开发笔记</title>
    <link href="/posts/minesweeper/"/>
    <url>/posts/minesweeper/</url>
    
    <content type="html"><![CDATA[<h1 id="扫雷开发笔记"><a href="#扫雷开发笔记" class="headerlink" title="扫雷开发笔记"></a>扫雷开发笔记</h1><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://s2.loli.net/2024/12/12/I9y8N2B4luAZMUC.png" alt="扫雷游戏开发(1)"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://s2.loli.net/2024/12/13/bCRM3mutWTE7QV1.png" alt=".png"></p><h2 id="难度设置"><a href="#难度设置" class="headerlink" title="难度设置"></a>难度设置</h2><p>简单：9*9 10雷</p><p>中级： 16*16 40雷</p><p>困难 ： 20*20  70雷</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>见<a href="https://github.com/Dr-WillMos/Minesweeper">Github仓库</a>，如果喜欢可以点个Star。</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我们使用了二位数组来实现扫雷，因Easyx库使用了C++的库且C++已适配绝大部分C语言的语法，所以我们提交的是.cpp文件，并封装了exe文件，可以直接双击运行。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>使用IDE：VS 2022</p><p>项目属性：使用多字节字符集</p><p>C语言标准：C89</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;easyx.h&gt;</span>  <span class="hljs-comment">// EasyX图形库，安装方式请见官网文档</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span>       <span class="hljs-comment">//计时库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span> <span class="hljs-comment">//windows的库，用于获取时间戳</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ROW 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_COL 20       <span class="hljs-comment">//以最大雷区作为常量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMG_SIZE 40     <span class="hljs-comment">// 这个数字用于实现从二维数组到游戏窗口的坐标转化</span></span><br><br>IMAGE img[<span class="hljs-number">13</span>];           <span class="hljs-comment">// 以数组的方式引入图片</span><br><span class="hljs-type">int</span> mine[MAX_ROW + <span class="hljs-number">2</span>][MAX_COL + <span class="hljs-number">2</span>];  <span class="hljs-comment">//+2是为了解决边缘问题</span><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mx;<br><span class="hljs-type">int</span> my;<br><span class="hljs-type">int</span> ROW = <span class="hljs-number">16</span>, COL = <span class="hljs-number">16</span>, MINE_NUM = <span class="hljs-number">40</span>;<br><br><span class="hljs-comment">//定义时间常量</span><br><span class="hljs-type">time_t</span> start_time;<br><span class="hljs-type">time_t</span> current_time;<br><span class="hljs-type">int</span> elapsed_time;<br></code></pre></td></tr></tbody></table></figure><p><strong>时间戳：</strong>时间戳是使用<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/212550?fromModule=lemma_inlink">数字签名</a>技术产生的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE/5947370?fromModule=lemma_inlink">数据</a>，因为程序的运行时间不同，时间戳也会不断变化，我们使用它作为生成随机数的种子。</p><h2 id="游戏初始化模块（gameInit"><a href="#游戏初始化模块（gameInit" class="headerlink" title="游戏初始化模块（gameInit)"></a>游戏初始化模块（gameInit)</h2><h3 id="开始界面停留"><a href="#开始界面停留" class="headerlink" title="开始界面停留"></a>开始界面停留</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C">initgraph(IMG_SIZE * ROW + <span class="hljs-number">240</span>, IMG_SIZE * COL);  <span class="hljs-comment">//创建游戏窗口</span><br><span class="hljs-type">int</span> mid1 = (IMG_SIZE * ROW + <span class="hljs-number">240</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> mid2 = (IMG_SIZE * COL) / <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y_length = IMG_SIZE * COL;<br><span class="hljs-type">int</span> x_length = IMG_SIZE * ROW + <span class="hljs-number">240</span>;<br><br>settextstyle(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">"宋体"</span>));         <span class="hljs-comment">//这里是以字符的左上角作为坐标基准</span><br>settextcolor(WHITE);<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* text = <span class="hljs-string">"开始"</span>;<br><br><span class="hljs-comment">// 获取字符串的宽度和高度</span><br><span class="hljs-type">int</span> textWidth = textwidth(text);<br><span class="hljs-type">int</span> textHeight = textheight(text);<br><br><span class="hljs-comment">// 计算字符串的中央位置</span><br><span class="hljs-type">int</span> centerX = x_length / <span class="hljs-number">2</span> - textWidth / <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> centerY = y_length / <span class="hljs-number">2</span> - textHeight / <span class="hljs-number">2</span>;<br><br><br>cleardevice();<br><br>outtextxy(centerX, centerY, text);<br><br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>    ExMessage em;<br>    <span class="hljs-keyword">if</span> (peekmessage(&amp;em, EX_MOUSE)) {<br>        <span class="hljs-keyword">if</span> (em.message == WM_LBUTTONDOWN) {<br>            <span class="hljs-keyword">if</span> (em.x &gt;= centerX &amp;&amp; em.x &lt;= centerX + textWidth &amp;&amp;<br>                em.y &gt;= centerY &amp;&amp; em.y &lt;= centerY + textHeight) {     <span class="hljs-comment">// 点击开始（处于坐标范围内），否则用户永远卡在该循环内。</span><br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>这里使通过点击处是否处于字符坐标区间内来判定是否开始。</p><h3 id="初始化计时器"><a href="#初始化计时器" class="headerlink" title="初始化计时器"></a>初始化计时器</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 初始化计时器</span><br>start_time = time(<span class="hljs-literal">NULL</span>);<br>current_time = start_time;<br>elapsed_time = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 设置字体和颜色</span><br>settextstyle(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">"宋体"</span>));<br>settextcolor(RGB(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>));<br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">"Time: "</span>));<br></code></pre></td></tr></tbody></table></figure><p>这里没什么好说的。</p><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 加载图片</span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">260</span>] = <span class="hljs-string">""</span>;      <span class="hljs-comment">//用于存储图片路径</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; ++i) {<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<span class="hljs-comment">//每次循环前，使用 memset 函数将 buf 数组清零</span><br>    sprintf_s(buf, <span class="hljs-string">"./img/%d.jpg"</span>, i);  <span class="hljs-comment">//将路径格式化</span><br>    loadimage(&amp;img[i], buf, IMG_SIZE, IMG_SIZE);<br>}<br></code></pre></td></tr></tbody></table></figure><p>memset函数能够快速填充空字符来清楚buff数组。</p><h3 id="随机数种子"><a href="#随机数种子" class="headerlink" title="随机数种子"></a>随机数种子</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">LARGE_INTEGER frequency;<br>LARGE_INTEGER start;<br>QueryPerformanceFrequency(&amp;frequency);<br>QueryPerformanceCounter(&amp;start);<br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(start.QuadPart));<br></code></pre></td></tr></tbody></table></figure><p>以当前时间戳来作为生成随机数的种子，使得在短时间内多次启动程序生成的随机数都是不同的。</p><h3 id="生成雷区"><a href="#生成雷区" class="headerlink" title="生成雷区"></a>生成雷区</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> row, col;<br><span class="hljs-built_in">memset</span>(mine, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(mine));  <span class="hljs-comment">// 清空雷区</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MINE_NUM;) {  <span class="hljs-comment">//随机生成雷</span><br>    row = rand() % ROW + <span class="hljs-number">1</span>;<br>    col = rand() % COL + <span class="hljs-number">1</span>;        <span class="hljs-comment">//rand函数，1-9之间随机生成值</span><br>    <span class="hljs-keyword">if</span> (mine[row][col] == <span class="hljs-number">0</span>) {<br>        mine[row][col] = <span class="hljs-number">9</span>;      <span class="hljs-comment">//9表示地雷</span><br>        ++i;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="更新格子数据"><a href="#更新格子数据" class="headerlink" title="更新格子数据"></a>更新格子数据</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 更新周围数字（九宫格内雷的数量）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL; ++j) {<br>        <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-number">9</span>) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = i - <span class="hljs-number">1</span>; a &lt;= i + <span class="hljs-number">1</span>; ++a) {<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = j - <span class="hljs-number">1</span>; b &lt;= j + <span class="hljs-number">1</span>; ++b) {<br>                    <span class="hljs-keyword">if</span> (mine[a][b] != <span class="hljs-number">9</span>) {<br>                        mine[a][b]++;<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="数据偏移加密"><a href="#数据偏移加密" class="headerlink" title="数据偏移加密"></a>数据偏移加密</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 给所有格子加上偏移量，防止与被翻开格子冲突，也是加密数据的一种表现</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        mine[i][j] += <span class="hljs-number">20</span>;  <span class="hljs-comment">//只有显示为29的才是雷，在20-28之间的都是非雷格子，点击翻开格子和递归翻开格子的操作就是-20</span><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>类似于凯撒密码，但这里的偏移值为20</p><h2 id="游戏胜利判断模块-isOver"><a href="#游戏胜利判断模块-isOver" class="headerlink" title="游戏胜利判断模块(isOver)"></a>游戏胜利判断模块(isOver)</h2><h3 id="检查是否踩到雷"><a href="#检查是否踩到雷" class="headerlink" title="检查是否踩到雷"></a>检查是否踩到雷</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> isHitMine = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//布尔型变量，只有0和1两种形式（即true和flase）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-number">9</span> &amp;&amp; (mine[i][j] &lt; <span class="hljs-number">20</span> || mine[i][j] &gt; <span class="hljs-number">29</span>)) {  <span class="hljs-comment">// 雷被翻开</span><br>            isHitMine = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">if</span> (isHitMine) <span class="hljs-keyword">break</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>布尔型变量：其只有0和1两种形式，即flase和true，常作为条件判断。</p><h3 id="重置计数器并弹出消息盒子"><a href="#重置计数器并弹出消息盒子" class="headerlink" title="重置计数器并弹出消息盒子"></a>重置计数器并弹出消息盒子</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 如果踩雷</span><br><span class="hljs-keyword">if</span> (isHitMine) {<br>    <span class="hljs-type">int</span> ok = MessageBox(GetHWnd(), <span class="hljs-string">"还要排雷吗"</span>, <span class="hljs-string">"你没了"</span>, MB_OKCANCEL);  <span class="hljs-comment">//easyx的函数，弹出消息盒子</span><br>    <span class="hljs-keyword">if</span> (ok == IDOK) {<br>        <span class="hljs-comment">// 重置雷区</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>                <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-number">9</span>) {<br>                    mine[i][j] += <span class="hljs-number">20</span>;         <span class="hljs-comment">// 将雷标记为已翻开</span><br>                }<br>            }<br>        }<br>        num = <span class="hljs-number">0</span>;<br>        start_time = time(<span class="hljs-literal">NULL</span>);        <span class="hljs-comment">// 重置游戏开始时间</span><br>        elapsed_time = <span class="hljs-number">0</span>;                    <span class="hljs-comment">// 重置计时器</span><br>        gameInit();                        <span class="hljs-comment">// 重新初始化雷区和图像</span><br>    }<br>    <span class="hljs-keyword">else</span> {<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);  <span class="hljs-comment">// 退出游戏</span><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p><code>exit(-1);</code>：终止当前进程。</p><h3 id="检查非雷格子被翻开"><a href="#检查非雷格子被翻开" class="headerlink" title="检查非雷格子被翻开"></a>检查非雷格子被翻开</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> uncoveredNonMine = <span class="hljs-number">0</span>;            <span class="hljs-comment">//翻开的非雷格子数量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        <span class="hljs-keyword">if</span> (mine[i][j] &lt; <span class="hljs-number">20</span> &amp;&amp; mine[i][j] != <span class="hljs-number">9</span>) {          <span class="hljs-comment">// 非雷且已翻开</span><br>            uncoveredNonMine++;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="游戏绘制模块-gameDraw"><a href="#游戏绘制模块-gameDraw" class="headerlink" title="游戏绘制模块 (gameDraw)"></a>游戏绘制模块 (gameDraw)</h2><h3 id="对指定格子进行贴图"><a href="#对指定格子进行贴图" class="headerlink" title="对指定格子进行贴图"></a>对指定格子进行贴图</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        <span class="hljs-type">int</span> x = (j - <span class="hljs-number">1</span>) * IMG_SIZE;<br>        <span class="hljs-type">int</span> y = (i - <span class="hljs-number">1</span>) * IMG_SIZE;<br>        <span class="hljs-keyword">if</span> (mine[i][j] &gt;= <span class="hljs-number">0</span> &amp;&amp; mine[i][j] &lt;= <span class="hljs-number">9</span>) {<br>            putimage(x, y, &amp;img[mine[i][j]]);<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mine[i][j] &gt;= <span class="hljs-number">20</span> &amp;&amp; mine[i][j] &lt; <span class="hljs-number">30</span>) {<br>            putimage(x, y, &amp;img[<span class="hljs-number">10</span>]);<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mine[i][j] &gt; <span class="hljs-number">29</span>) {<br>            putimage(x, y, &amp;img[<span class="hljs-number">11</span>]);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="显示计数器"><a href="#显示计数器" class="headerlink" title="显示计数器"></a>显示计数器</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">    <span class="hljs-comment">// 显示计时器</span><br>    <span class="hljs-type">char</span> time_str[<span class="hljs-number">20</span>];<br>    sprintf_s(time_str, <span class="hljs-string">"%d s"</span>, elapsed_time);<br>    settextcolor(RGB(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>));<br>    outtextxy(IMG_SIZE * ROW + <span class="hljs-number">80</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">"     "</span>));<br>    settextcolor(RGB(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    outtextxy(IMG_SIZE * ROW + <span class="hljs-number">110</span>, <span class="hljs-number">20</span>, time_str);<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="递归展开格子模块（openNUll）"><a href="#递归展开格子模块（openNUll）" class="headerlink" title="递归展开格子模块（openNUll）"></a>递归展开格子模块（openNUll）</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (mine[r][c] == <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r - <span class="hljs-number">1</span>; i &lt;= r + <span class="hljs-number">1</span>; ++i) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = c - <span class="hljs-number">1</span>; j &lt;= c + <span class="hljs-number">1</span>; ++j) {<br>            <span class="hljs-keyword">if</span> ((mine[i][j] == <span class="hljs-number">20</span> || mine[i][j] != <span class="hljs-number">29</span>) &amp;&amp; mine[i][j] &gt; <span class="hljs-number">9</span>) {<br>                mine[i][j] -= <span class="hljs-number">20</span>;<br>                num++;<br>                openNUll(i, j);<br>            }<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="开始菜单模块-showMenu"><a href="#开始菜单模块-showMenu" class="headerlink" title="开始菜单模块(showMenu)"></a>开始菜单模块(showMenu)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C">initgraph(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>);  <span class="hljs-comment">// 创建菜单窗口</span><br>setbkcolor(WHITE);<br>cleardevice();<br><br>settextstyle(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">"宋体"</span>));<br>settextcolor(BLACK);<br>outtextxy(<span class="hljs-number">150</span>, <span class="hljs-number">50</span>, _T(<span class="hljs-string">"选择游戏难度："</span>));<br>outtextxy(<span class="hljs-number">150</span>, <span class="hljs-number">100</span>, _T(<span class="hljs-string">"1. 简单"</span>));<br>outtextxy(<span class="hljs-number">150</span>, <span class="hljs-number">140</span>, _T(<span class="hljs-string">"2. 中等"</span>));<br>outtextxy(<span class="hljs-number">150</span>, <span class="hljs-number">180</span>, _T(<span class="hljs-string">"3. 困难"</span>));<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>    ExMessage em;<br>    <span class="hljs-keyword">if</span> (peekmessage(&amp;em, EX_MOUSE)) {<br>        <span class="hljs-keyword">if</span> (em.message == WM_LBUTTONDOWN) {<br>            <span class="hljs-keyword">if</span> (em.x &gt; <span class="hljs-number">150</span> &amp;&amp; em.x &lt; <span class="hljs-number">250</span> &amp;&amp; em.y &gt; <span class="hljs-number">100</span> &amp;&amp; em.y &lt; <span class="hljs-number">120</span>) {     <span class="hljs-comment">// 点击简单（处于坐标范围内）</span><br>                ROW = <span class="hljs-number">9</span>;<br>                COL = <span class="hljs-number">9</span>;<br>                MINE_NUM = <span class="hljs-number">10</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (em.x &gt; <span class="hljs-number">150</span> &amp;&amp; em.x &lt; <span class="hljs-number">250</span> &amp;&amp; em.y &gt; <span class="hljs-number">140</span> &amp;&amp; em.y &lt; <span class="hljs-number">160</span>) {   <span class="hljs-comment">// 点击中等</span><br>                ROW = <span class="hljs-number">16</span>;<br>                COL = <span class="hljs-number">16</span>;<br>                MINE_NUM = <span class="hljs-number">40</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (em.x &gt; <span class="hljs-number">150</span> &amp;&amp; em.x &lt; <span class="hljs-number">250</span> &amp;&amp; em.y &gt; <span class="hljs-number">180</span> &amp;&amp; em.y &lt; <span class="hljs-number">200</span>) {    <span class="hljs-comment">// 点击困难</span><br>                ROW = <span class="hljs-number">20</span>;<br>                COL = <span class="hljs-number">20</span>;<br>                MINE_NUM = <span class="hljs-number">70</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    }<br>}<br>closegraph();  <span class="hljs-comment">// 关闭菜单窗口</span><br></code></pre></td></tr></tbody></table></figure><h2 id="侧边栏提示模块-tips"><a href="#侧边栏提示模块-tips" class="headerlink" title="侧边栏提示模块(tips)"></a>侧边栏提示模块(tips)</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">current_time = time(<span class="hljs-literal">NULL</span>);<br>elapsed_time = (<span class="hljs-type">int</span>)(current_time - start_time);<br><br><span class="hljs-type">char</span> time_str[<span class="hljs-number">20</span>];<br>sprintf_s(time_str, <span class="hljs-string">"%d s"</span>, elapsed_time);<br><br>settextcolor(RGB(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>));         <span class="hljs-comment">//设置时间字体颜色。</span><br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">85</span>, <span class="hljs-number">20</span>, time_str);                 <span class="hljs-comment">//easyx的输出</span><br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">15</span>, <span class="hljs-number">50</span>, _T(<span class="hljs-string">"鼠标左键：翻开格子"</span>));<br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">15</span>, <span class="hljs-number">80</span>, _T(<span class="hljs-string">"鼠标右键：标记地雷"</span>));<br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">15</span>, <span class="hljs-number">110</span>, _T(<span class="hljs-string">"所有的非雷格子都被打开"</span>));<br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">15</span>, <span class="hljs-number">140</span>, _T(<span class="hljs-string">"才算游戏胜利"</span>));<br>outtextxy(IMG_SIZE * ROW + <span class="hljs-number">15</span>, <span class="hljs-number">170</span>, _T(<span class="hljs-string">"祝你游戏愉快"</span>));<br><br></code></pre></td></tr></tbody></table></figure><h2 id="鼠标消息处理模块-mouseClick"><a href="#鼠标消息处理模块-mouseClick" class="headerlink" title="鼠标消息处理模块(mouseClick)"></a>鼠标消息处理模块(mouseClick)</h2><h3 id="左键点击并保护雷区"><a href="#左键点击并保护雷区" class="headerlink" title="左键点击并保护雷区"></a>左键点击并保护雷区</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> firstClick = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 用一个变量标记是否为第一次点击</span><br>ExMessage em;                                 <span class="hljs-comment">//Easyx函数存储消息</span><br><span class="hljs-keyword">if</span> (peekmessage(&amp;em, EX_MOUSE)) {<br>    mx = em.y / IMG_SIZE + <span class="hljs-number">1</span>;<br>    my = em.x / IMG_SIZE + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (em.lbutton) {          <span class="hljs-comment">// 鼠标左键点击</span><br>        <span class="hljs-keyword">if</span> (firstClick) {<br>            firstClick = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 标记第一次点击已完成，准备随机布雷。</span><br><br>            <span class="hljs-comment">// 生成雷区并保护第一次点击及其周围，不能在周围生成雷</span><br>            <span class="hljs-type">int</span> protectedRow = mx;<br>            <span class="hljs-type">int</span> protectedCol = my;           <span class="hljs-comment">//获取鼠标点击位置。</span><br><br>            <span class="hljs-comment">// 随机生成雷区</span><br>            <span class="hljs-type">int</span> row, col;<br>            <span class="hljs-built_in">memset</span>(mine, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(mine));  <span class="hljs-comment">// 清空雷区，清除gameinit函数的第一次结果</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MINE_NUM;) {<br>                row = rand() % ROW + <span class="hljs-number">1</span>;<br>                col = rand() % COL + <span class="hljs-number">1</span>;<br><br>                <span class="hljs-comment">// 跳过第一次点击区域及其周围九宫格</span><br>                <span class="hljs-keyword">if</span> (row &gt;= protectedRow - <span class="hljs-number">1</span> &amp;&amp; row &lt;= protectedRow + <span class="hljs-number">1</span> &amp;&amp;<br>                    col &gt;= protectedCol - <span class="hljs-number">1</span> &amp;&amp; col &lt;= protectedCol + <span class="hljs-number">1</span>) {<br>                    <span class="hljs-keyword">continue</span>;<br>                }<br><br>                <span class="hljs-keyword">if</span> (mine[row][col] == <span class="hljs-number">0</span>) {<br>                    mine[row][col] = <span class="hljs-number">9</span>;  <span class="hljs-comment">// 9 表示地雷</span><br>                    ++i;<br>                }<br>            }<br></code></pre></td></tr></tbody></table></figure><h3 id="更新周围数据"><a href="#更新周围数据" class="headerlink" title="更新周围数据"></a>更新周围数据</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 更新周围数字</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-number">9</span>) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = i - <span class="hljs-number">1</span>; a &lt;= i + <span class="hljs-number">1</span>; ++a) {<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = j - <span class="hljs-number">1</span>; b &lt;= j + <span class="hljs-number">1</span>; ++b) {<br>                    <span class="hljs-keyword">if</span> (mine[a][b] != <span class="hljs-number">9</span>) {<br>                        mine[a][b]++;<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="加密数据"><a href="#加密数据" class="headerlink" title="加密数据"></a>加密数据</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; ROW + <span class="hljs-number">1</span>; ++i) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; COL + <span class="hljs-number">1</span>; ++j) {<br>        mine[i][j] += <span class="hljs-number">20</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="翻开格子"><a href="#翻开格子" class="headerlink" title="翻开格子"></a>翻开格子</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">    <span class="hljs-keyword">if</span> (mine[mx][my] &gt; <span class="hljs-number">9</span>) {<br>        mine[mx][my] -= <span class="hljs-number">20</span>;<br>        openNUll(mx, my);<br>        num++;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="右键标记功能"><a href="#右键标记功能" class="headerlink" title="右键标记功能"></a>右键标记功能</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (em.rbutton) {  <span class="hljs-comment">// 鼠标右键标记</span><br>            <span class="hljs-keyword">if</span> (mine[mx][my] &gt; <span class="hljs-number">9</span> &amp;&amp; mine[mx][my] &lt;= <span class="hljs-number">29</span>) {<br>                mine[mx][my] += <span class="hljs-number">20</span>;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                mine[mx][my] -= <span class="hljs-number">20</span>;<br>            }<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="主函数部分（main）"><a href="#主函数部分（main）" class="headerlink" title="主函数部分（main）"></a>主函数部分（main）</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    showMenu();<br>    gameInit();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {          <span class="hljs-comment">//不断循环保证数据随时更新</span><br>        tips();<br>        mouseClick();<br>        gameDraw();<br>        isOver();<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="整体原理"><a href="#整体原理" class="headerlink" title="整体原理"></a>整体原理</h2><ul><li><strong>菜单的调用</strong>程序从 <code>main</code>函数开始执行，首先调用 <code>showMenu</code>函数创建一个菜单窗口，展示不同难度选项供玩家选择，玩家通过鼠标点击相应区域确定游戏难度（简单、中等、困难），对应不同的行数、列数和雷的数量设置。</li><li><strong>初始化操作</strong>选择完难度后，<code>gameInit</code>函数被调用，进行多方面的初始化操作。先是利用 <code>initgraph</code>初始化图形界面，设置好窗口大小并准备显示游戏内容。接着初始化计时器，记录游戏开始时间，用于后续统计游戏用时。同时，加载游戏中所需的各类图片资源，像代表数字、空白格、地雷等不同状态的图片。然后，生成雷区布局，通过获取合适的随机数种子，按照设定好的雷数，在排除首次点击及其周边九宫格范围的情况下，随机放置地雷，并根据地雷分布更新周围格子所对应的周边地雷数量，最后通过给每个格子数据添加偏移量的方式对雷区数据进行加密处理，便于后续判断格子状态和展开操作。</li><li><strong>界面更新与提示</strong>：在游戏运行的主循环（<code>main</code>函数中的 <code>while (true)</code>循环）里，每次循环都会调用 <code>tips</code>函数来更新游戏界面右侧的提示信息，包括显示游戏耗时以及告知玩家鼠标左右键的操作功能（左键翻开格子、右键标记地雷等），让玩家清楚游戏进展情况和操作方法。</li><li><strong>鼠标交互处理</strong>：<code>mouseClick</code>函数负责处理鼠标消息。对于鼠标左键点击，若为首次点击，会保护点击位置及其九宫格区域不布雷，随后生成雷区、更新周围雷数并加密雷区；若非首次点击，会根据点击格子的状态进行相应处理，比如翻开空白格及递归展开其周围空白格，同时统计翻开格子数量。对于鼠标右键点击，则是实现对格子进行标记地雷或取消标记的功能，通过改变对应格子存储的数据来体现标记状态的切换。</li><li><strong>界面绘制展示</strong>：<code>gameDraw</code>函数根据雷区二维数组中每个格子的数据值，确定要在对应位置绘制的图片（例如对应数字的图片、空白格图片、地雷图片等），将雷区当前的状态直观展示在游戏窗口上，同时更新显示游戏的计时器信息，实时呈现游戏的状态变化。</li><li><strong>游戏结束判断</strong>：<code>isOver</code>函数负责判断游戏是否结束，分为失败和胜利两种情况。通过遍历雷区数组，判断是否有雷被翻开以此来确定是否踩雷，若踩雷则弹出消息框询问玩家是否继续游戏，继续则重置相关状态重新开始，取消则退出游戏。同时，会统计已翻开的非雷格子数量，当该数量等于总格子数减去雷数时，判定游戏胜利，同样弹出消息框让玩家选择继续游戏或者退出，选择继续就重置状态重新初始化游戏，选择退出则直接结束程序。</li></ul><h2 id="开发过程出现的BUG和解决思路"><a href="#开发过程出现的BUG和解决思路" class="headerlink" title="开发过程出现的BUG和解决思路"></a>开发过程出现的BUG和解决思路</h2><p><strong>1.开头暴雷</strong></p><p>第一个解决思路是开头暴雷后重新排雷，结果出现了内存溢出的错误，第二个思路是先不排雷，在第一次点击的地方生成保护区，再开始排雷。笔者引入了一个bool值，解决了该问题。</p><p><strong>2.重新开始后失去开头保护</strong></p><p>一开始的解决思路是使用goto，但这会降低代码可读性，也不符合编译标准。所以，我编写了一个新的函数<code>restartgame</code>来重置游戏，这个思路被证实能够完美地解决该问题。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这可能是一个很拙劣的游戏源码，但编写他花了我和我的组员很多时间，如果喜欢，别忘了点个<a href="https://github.com/Dr-WillMos/Minesweeper">Star</a>,谢谢。</p>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>开发</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序：基于插入算法的改进版本</title>
    <link href="/posts/shell_sort/"/>
    <url>/posts/shell_sort/</url>
    
    <content type="html"><![CDATA[<h1 id="希尔排序：基于插入算法的改进版本"><a href="#希尔排序：基于插入算法的改进版本" class="headerlink" title="希尔排序：基于插入算法的改进版本"></a>希尔排序：基于插入算法的改进版本</h1><p>平均时间复杂度：<strong>O(n log n)</strong></p><p>最好时间复杂度：<strong>O(n log^2 n)</strong></p><p>最坏时间复杂度：<strong>O(n log n)</strong></p><p>稳定性：<strong>不稳定</strong></p><p>特点：<strong>1.处理基本有序的效率较高</strong></p><p><strong>2.数据量比较小时效率较高</strong></p><p>希尔排序，又名<strong>缩小增量排序</strong>，是基于插入排序的一种<strong>改进算法</strong>，解决了插入排序一次只能移动一个元素造成的低效问题。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>1.设定一个<strong>增量</strong>整型gap = len / 2，向下取整，根据gap分组。</p><p>2.对每一组进行<strong>插入排序</strong>。</p><p>3.更新gap = gap / 2，继续以上操作。</p><p>4.知道gap == 1停止，对所有元素执行插入排序。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">shell_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> {   <span class="hljs-comment">// &gt;&gt;是位运算符，相当于/2并向下取整</span><br>        <span class="hljs-type">int</span> gap, i, j;<br>        <span class="hljs-type">int</span> temp; <br>        <span class="hljs-keyword">for</span> (gap = len &gt;&gt; <span class="hljs-number">1</span>; gap &gt; <span class="hljs-number">0</span>; gap &gt;&gt;= <span class="hljs-number">1</span>)  <span class="hljs-comment">//第一层循环，保证gap的更新</span><br>                <span class="hljs-keyword">for</span> (i = gap; i &lt; len; i++) {     <span class="hljs-comment">//第二层循环，保证组别的切换</span><br>                        temp = arr[i];<br>                        <span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)  <span class="hljs-comment">//第三层循环，完成组内比较。</span><br>                                arr[j + gap] = arr[j];<br>                        arr[j + gap] = temp;<br>                }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>假设有 {4, 2, 7, 0, 5, 8}这个数组，len = 6，首先，初始的 gap = len &gt;&gt; 1 也就是 6 &gt;&gt; 1 = 3（这里的 “&gt;&gt;” 是右移操作符，相当于除以 2 向下取整）。此时数组根据 gap 的值被分为了两组，分别是 {4, 0} 和 {2, 5} 以及 {7, 8}。</p><p>对于第一组 {4, 0}，进入内层的插入排序循环（也就是第三层循环），因为 4 &gt; 0，所以会将 4 往后移动（通过 arr [j + gap] = arr [j] 语句），然后把 0 放到合适的位置，即 arr [0] 的位置，这一组就排好了序。同样地，对 {2, 5} 和 {7, 8}  这两组也会进行类似的插入排序操作。</p><p>接着，<strong>更新 gap = gap &gt;&gt; 1</strong>，此时 gap 变为 1。这意味着现在要对整个数组当作一组来进行插入排序了。</p><p>从第二个元素开始遍历整个数组（第二层循环保证了这个遍历过程），比如对于元素 2，先把它存到临时变量 temp 中，然后通过第三层循环，与前面已经排好序的元素依次比较（这里是和 4 比较，因为 j = i -  gap，此时 i 是对应元素 2 的索引，gap 为 1），如果前面的元素大于它，就把前面的元素往后移（同样是通过 arr [j + gap] = arr [j] 语句），直到找到合适的位置，再把 temp（也就是  2）放到那个位置。就这样依次对数组中的每个元素进行这样的插入排序操作，直到整个数组都排好序为止。</p><h2 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h2><p>增量大时，分组多，组内元素比较少，效率较高。</p><p>随着增量逐渐减小，虽然组内元素越来越多，<strong>但整体越来越有序</strong>，所以效率越来越高。</p><h3 id="不稳定性"><a href="#不稳定性" class="headerlink" title="不稳定性"></a>不稳定性</h3><p><strong>希尔排序会改变排序前相同元素的相对位置。</strong></p><p>例如：数组 [5*, 4, 5, 2, 8, 1]，（对不同的5加星号标记）希尔排序之后会改变两个5的相对位置，排序后的星号5出现在5的后面。</p><p>所有希尔排序具有<strong>不稳定性</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络工程</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插入排序</title>
    <link href="/posts/insertion_sort/"/>
    <url>/posts/insertion_sort/</url>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>平均时间复杂度：<strong>O($n^2$)</strong></p><p>最好时间复杂度：<strong>O(n)</strong></p><p>最坏时间复杂度：<strong>O($n^2$)</strong></p><p>稳定性：<strong>稳定</strong></p><p>将第一个元素设置为有序区，将后面的每个数<strong>插入</strong>到前面的有序区之内，形同打扑克牌时<strong>摸牌插入到手中牌堆内。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">insertion_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span>{  <span class="hljs-comment">//两个重要参数</span><br>        <span class="hljs-type">int</span> i,j,key;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;len;i++){   <br>                key = arr[i];  <span class="hljs-comment">//这里的key就是中间变量，意味着待处理元素</span><br>                j=i<span class="hljs-number">-1</span>;         <span class="hljs-comment">//前移一位</span><br>                <span class="hljs-keyword">while</span>((j&gt;=<span class="hljs-number">0</span>) &amp;&amp; (arr[j]&gt;key)) {  <br>                        arr[j+<span class="hljs-number">1</span>] = arr[j];   <span class="hljs-comment">//这三行代码完成了交换</span><br>                        j--;                 <span class="hljs-comment">//j--表示比较的移动，逐渐移动到arr[0]</span><br>                }<br>                arr[j+<span class="hljs-number">1</span>] = key;    <span class="hljs-comment">//如果while不执行，这句相当于什么都不做</span><br>        }<br><br></code></pre></td></tr></tbody></table></figure><h2 id="针对有序区处理的顺序"><a href="#针对有序区处理的顺序" class="headerlink" title="针对有序区处理的顺序"></a>针对有序区处理的顺序</h2><p>使用插入将数组元素从小到大排序，在将待处理元素与有序区比较时，<strong>强烈建议</strong>从后往前<strong>（即从有序区的大数到小数的顺序来比较）</strong>排序，因为这样<strong>只需要移动比待处理元素大的元素，一旦找到位置就可以直接插入。</strong></p><p>比如{1,3,5,7}待处理元素为4，在比较5，7之后移动了2个元素，再把4插入3后面即可。</p><p>但如果是反着来，可能会对已经比较过的元素进行多次移动操作，尤其是当待插入元素较小，需要移动的元素较多时，<strong>效率相对较低。</strong></p><p>然而这也不是绝对的，<strong>但从大到小是通常情况下的最优解。</strong></p>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四大常用字符处理函数的实现</title>
    <link href="/posts/String/"/>
    <url>/posts/String/</url>
    
    <content type="html"><![CDATA[<h1 id="四大常用字符处理函数的实现"><a href="#四大常用字符处理函数的实现" class="headerlink" title="四大常用字符处理函数的实现"></a>四大常用字符处理函数的实现</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>对于指针变量s，*s代表其指向的变量（声明变量时不代表），可能是整型变量a，也可能是字符变量c。s代表他本身，他是一个地址，比如，32ffcs。理解这一点，不然剩下的很难看懂。</p><p>函数中，需要把实际参数的地址赋给形参的指针变量，并根据“函数中的指针能够修改实际变量”的特点来实现函数功能，例子详见strcat函数。</p><h3 id="strlen函数：获取字符串长度"><a href="#strlen函数：获取字符串长度" class="headerlink" title="strlen函数：获取字符串长度"></a>strlen函数：获取字符串长度</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mystrlen</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span><br>{<br>    <span class="hljs-type">char</span> *b = s;   <span class="hljs-comment">//这里就是让形参b得到了*s的地址，即s。</span><br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">for</span> (;*b != <span class="hljs-string">'\0'</span>;b++)<br>    {<br>        length++;<br>    }<br>    <span class="hljs-keyword">return</span> length;<br>}<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> x[<span class="hljs-number">10</span>] = <span class="hljs-string">"abcdefgh"</span>;<br>    <span class="hljs-type">int</span> a;<br>    a = mystrlen(x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,a);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="srtrcpy函数：实现字符串的复制"><a href="#srtrcpy函数：实现字符串的复制" class="headerlink" title="srtrcpy函数：实现字符串的复制"></a>srtrcpy函数：实现字符串的复制</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mystrcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *a, <span class="hljs-type">char</span> *b)</span> {<br>    <span class="hljs-type">char</span> temp;<br>    temp = *b;  <span class="hljs-comment">// 先取出b指向的当前字符</span><br>    <span class="hljs-keyword">while</span> (temp!= <span class="hljs-string">'\0'</span>) {<br>        *a = temp;<br>        a++;<br>        b++;<br>        temp = *b;  <span class="hljs-comment">// 更新temp为下一个字符</span><br>    }<br>    *a = <span class="hljs-string">'\0'</span>;  <span class="hljs-comment">// 手动添加字符串结束符到目标字符串末尾</span><br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">char</span> *x = <span class="hljs-string">"nihaozhangzhou"</span>;  <span class="hljs-comment">// 记得定义足够大的字符数组来存储目标字符串，避免数组越界。</span><br>    <span class="hljs-type">char</span> *y = <span class="hljs-string">"zhongguo"</span>;<br>    mystrcpy(x, y);<br>    <span class="hljs-built_in">puts</span>(x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="strcat函数：实现字符串连接"><a href="#strcat函数：实现字符串连接" class="headerlink" title="strcat函数：实现字符串连接"></a>strcat函数：实现字符串连接</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//字符串拼接函数 mystrcat()，在这里，假设X是32ffcs（说明*x的地址是32ffcs）;那么将x的值赋给p;通过函数内指针能够修改实际参数的特点修改指定值，所以最后的return可以是p也可以是x。</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">mystrcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *x, <span class="hljs-type">char</span> *y)</span><br>{<br>    <span class="hljs-type">char</span> *p;<br>    <span class="hljs-type">char</span> *q;<br>    <span class="hljs-keyword">for</span> (p = x;*p != <span class="hljs-string">'\0'</span>; p++);<br>    <span class="hljs-keyword">for</span> (q = y;*q != <span class="hljs-string">'\0'</span>; q++)<br>    {<br>        *p = *q;<br>        p++;<br>    }<br>    *p = <span class="hljs-string">'\0'</span>;<br>    <span class="hljs-keyword">return</span> p;<br>}<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>     <span class="hljs-type">char</span> a[<span class="hljs-number">80</span>]=<span class="hljs-string">"Spring "</span>;<br>     <span class="hljs-type">char</span> b[]= <span class="hljs-string">"Equinox"</span>;<br>     mystrcat(a,b);<br>     <span class="hljs-built_in">puts</span>(a);<br><br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="strcmp：实现字符串的比较，包括长度和字符两方面。"><a href="#strcmp：实现字符串的比较，包括长度和字符两方面。" class="headerlink" title="strcmp：实现字符串的比较，包括长度和字符两方面。"></a>strcmp：实现字符串的比较，包括长度和字符两方面。</h3><p>只有长度相同，每个字符都相同时才相同，此时输出0。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mystrcmp</span><span class="hljs-params">(<span class="hljs-type">char</span> *x,<span class="hljs-type">char</span> *y)</span><br>{<br>  <br>    <span class="hljs-type">char</span> *p = x;<br>    <span class="hljs-type">char</span> *q = y;<br>    <span class="hljs-keyword">while</span> (*p!= <span class="hljs-string">'\0'</span> &amp;&amp; *q!= <span class="hljs-string">'\0'</span>)<br>{<br>    <span class="hljs-keyword">if</span> (*p &gt; *q)<br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p &lt; *q)<br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br>    p++;<br>    q++;<br>}<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">'\0'</span> &amp;&amp; *q!= <span class="hljs-string">'\0'</span>)<br>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <br>}<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p!= <span class="hljs-string">'\0'</span> &amp;&amp; *q == <span class="hljs-string">'\0'</span>)<br>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>}<br><span class="hljs-keyword">else</span><br>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br><br>}<br>}<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{<br>    <span class="hljs-type">char</span> a[] = <span class="hljs-string">"China"</span>;<br>    <span class="hljs-type">char</span> *b = <span class="hljs-string">"ChinaIlove"</span>;<br>    <span class="hljs-type">int</span> v = mystrcmp(a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,v);<br><br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA补题（一）</title>
    <link href="/posts/pta1/"/>
    <url>/posts/pta1/</url>
    
    <content type="html"><![CDATA[<h1 id="PTA补题（一）"><a href="#PTA补题（一）" class="headerlink" title="PTA补题（一）"></a>PTA补题（一）</h1><p><strong>1.以下定义了一个一维数组str，该数组可以存放81个字符型数据。</strong>       T，’\0’也算一个字符</p><figure class="highlight axapta"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">char</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">81</span>];<br></code></pre></td></tr></tbody></table></figure><p><strong>2.数组定义后，数组名表示该数组所分配连续内存空间中第一个单元的地址，即首地址。</strong>      T</p><p><strong>3.数组定义后，只能引用单个的数组元素，而不能一次引用整个数组。</strong>  T</p><p>数组名只代表首个元素，更多时候是通过遍历来实现对数组的引用。</p><p><strong>4.在以下描述中，（ ABE ）是正确的。</strong></p><p><strong>A.</strong></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> a[<span class="hljs-number">5</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};<br></code></pre></td></tr></tbody></table></figure><p><strong>定义了数组a，并对数组元素赋初值。此时，a[0]为1，a[1]为2，a[2]为3，a[3]为4，a[4]为5。</strong></p><p><strong>B.</strong></p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">static</span> <span class="hljs-type">int</span> b[<span class="hljs-number">10</span>];<br></code></pre></td></tr></tbody></table></figure><p><strong>定义了静态数组b，且10个数组元素的初值都为0。</strong></p><p><strong>C.</strong></p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int fib[<span class="hljs-number">45</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>定义了数组fib，且45个数组元素的值都为0。****自动变量可能为任何数字</strong></p><p><strong>D.</strong></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">static</span> int week[<span class="hljs-number">7</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br></code></pre></td></tr></tbody></table></figure><p><strong>定义了静态数组week，并对数组 week 的前3个元素week[0]～week[2]赋初值，week[3]～week[6]值都是不确定的。****静态变量未初始化时固定为0</strong></p><p><strong>E.</strong></p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int cnt[<span class="hljs-number">10</span>] <span class="hljs-operator">=</span> {<span class="hljs-number">1</span>}<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>定义了数组cnt，并对cnt[0]赋初值1，其余元素的初值为0。</strong></p><p><strong>5.<code>"a"</code> 和 <code>'a'</code>是等价的。</strong> F，前者代表字符串，后者代表字符</p><p><strong>6.调用strcmp函数比较字符串大小时，通常较长的字符串会较大。  F</strong></p><p><strong>调用</strong><code>strcmp</code>函数比较字符串大小时，是按照字典序而不是字符串长度来判断的。</p><p><strong>7.如果函数定义出现在函数调用之前，可以不必加函数原型声明。 F</strong></p><p><strong>需要的</strong></p><p><strong>9.C语言中函数不能嵌套定义  T</strong></p><p><strong>10.静态变量的作用域是整个文件。   F</strong></p><p><strong>如果在函数中出现，只在函数中有效</strong></p><p><strong>11.当变量的存储类型定义缺省时,系统默认为变量的存储类型为auto类型,分配在静态区。</strong></p><p><strong>分配在栈区</strong></p><p><strong>12.全局变量只能定义在程序的最前面，即第一个函数的前面。</strong>   F，任何位置a</p><p><strong>13.静态局部变量如果没有赋值，其存储单元中将是随机值。</strong>  F，为0</p><p><strong>14.<a href="https://pintia.cn/problem-sets/1861991914122440704/exam/problems/type/7?problemSetProblemId=1861991914193743872">约瑟夫环</a></strong></p><blockquote><p><strong>用数组的方法的缺点是必须知道测试点在什么范围，用动态分配内存就可以解决这个问题。</strong></p></blockquote><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br><span class="hljs-keyword">int</span> josephus(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m) {<br> &nbsp; &nbsp;<span class="hljs-keyword">int</span> monkeys[<span class="hljs-number">300</span>]; &nbsp;<span class="hljs-regexp">//</span> 定义足够大的数组来存放猴子状态，假设最多<span class="hljs-number">300</span>只猴子，可根据实际情况调整大小<br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;monkeys[i] = i + <span class="hljs-number">1</span>; &nbsp;<span class="hljs-regexp">//</span> 初始化猴子编号，从<span class="hljs-number">1</span>开始<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-keyword">int</span> count = n; &nbsp;<span class="hljs-regexp">//</span> 剩余猴子数量<br> &nbsp; &nbsp;<span class="hljs-keyword">int</span> <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>; &nbsp;<span class="hljs-regexp">//</span> 当前报数位置索引<br> &nbsp; &nbsp;<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>; &nbsp;<span class="hljs-regexp">//</span> 当前报数数字<br><br> &nbsp; &nbsp;<span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">1</span>) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> (monkeys[<span class="hljs-keyword">index</span>] &gt; <span class="hljs-number">0</span>) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num++;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> (num == m) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;monkeys[<span class="hljs-keyword">index</span>] = -<span class="hljs-number">1</span>; &nbsp;<span class="hljs-regexp">//</span> 将报到m的猴子标记为已淘汰（这里用 -<span class="hljs-number">1</span> 标记）<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num = <span class="hljs-number">0</span>;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count--;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">index</span>++; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-regexp">//</span>轮到下一个猴子报数。<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> == n) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-regexp">//</span>索引越界时重置为<span class="hljs-number">0</span><br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br><br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> (monkeys[i] &gt; <span class="hljs-number">0</span>) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">return</span> monkeys[i]; &nbsp;<span class="hljs-regexp">//</span> 返回剩下猴子的编号，也就是猴王编号<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; &nbsp;<span class="hljs-regexp">//</span> 正常情况不会执行到这里，只是为了语法完整性<br>}<br><br><span class="hljs-keyword">int</span> main() {<br> &nbsp; &nbsp;<span class="hljs-keyword">int</span> n, m;<br> &nbsp; &nbsp;<span class="hljs-keyword">while</span> (scanf(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;m)!= EOF &amp;&amp; (n!= <span class="hljs-number">0</span> || m!= <span class="hljs-number">0</span>)) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">int</span> result = josephus(n, m);<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">printf</span>(<span class="hljs-string">"%d\n"</span>, result);<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p><strong>15.<a href="https://pintia.cn/problem-sets/1861991914122440704/exam/problems/type/7?problemSetProblemId=1861991914193743876&amp;page=0">矩阵相乘</a></strong></p><blockquote><p>相乘时的元素遍历需要注意。</p></blockquote><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100</span><br><br><span class="hljs-comment">// 计算矩阵乘法的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">matrixMultiply</span><span class="hljs-params">(<span class="hljs-type">int</span> matrixA[][MAX_SIZE], <span class="hljs-type">int</span> ra, <span class="hljs-type">int</span> ca, <span class="hljs-type">int</span> matrixB[][MAX_SIZE], <span class="hljs-type">int</span> rb, <span class="hljs-type">int</span> cb)</span> </span>{<br> &nbsp; &nbsp;<span class="hljs-keyword">if</span> (ca!= rb) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: %d!= %d\n"</span>, ca, rb);<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">return</span>;<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-type">int</span> result[MAX_SIZE][MAX_SIZE];<br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ra; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//左矩阵的行数遍历</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cb; j++) { &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//右矩阵列数遍历</span><br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result[i][j] = <span class="hljs-number">0</span>; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; ca; k++) { &nbsp; &nbsp;<span class="hljs-comment">//双矩阵元素乘法的元素遍历</span><br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result[i][j] += matrixA[i][k] * matrixB[k][j];<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-comment">// 输出结果矩阵</span><br> &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, ra, cb);<br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ra; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cb; j++) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, result[i][j]);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> (j &lt; cb - <span class="hljs-number">1</span>) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br> &nbsp;  }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br> &nbsp; &nbsp;<span class="hljs-type">int</span> ra, ca;<br> &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;ra, &amp;ca);<br> &nbsp; &nbsp;<span class="hljs-type">int</span> matrixA[MAX_SIZE][MAX_SIZE];<br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ra; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; ca; j++) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;matrixA[i][j]);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br><br> &nbsp; &nbsp;<span class="hljs-type">int</span> rb, cb;<br> &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;rb, &amp;cb);<br> &nbsp; &nbsp;<span class="hljs-type">int</span> matrixB[MAX_SIZE][MAX_SIZE];<br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rb; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cb; j++) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;matrixB[i][j]);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-built_in">matrixMultiply</span>(matrixA, ra, ca, matrixB, rb, cb);<br> &nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p><strong>16.<a href="https://pintia.cn/problem-sets/1861991914122440704/exam/problems/type/7?problemSetProblemId=1861991914193743878&amp;page=0">卷积</a></strong></p><blockquote><p><strong>就是成倍数输出数组，我当时想太多了。</strong></p></blockquote><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 10</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br> &nbsp; &nbsp;<span class="hljs-type">int</span> n, k;<br> &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;n, &amp;k);<br> &nbsp; &nbsp;<span class="hljs-type">int</span> image[MAX_SIZE][MAX_SIZE]; &nbsp;<span class="hljs-comment">// 存储原始图像像素信息的二维数组</span><br><br> &nbsp; &nbsp;<span class="hljs-comment">// 读取原始图像像素信息</span><br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;image[i][j]);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp;  }<br><br> &nbsp; &nbsp;<span class="hljs-comment">// 按照倍数放大图像并输出</span><br> &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> row = <span class="hljs-number">0</span>; row &lt; n * k; row++) {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; n * k; col++) {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-type">int</span> originRow = row / k;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-type">int</span> originCol = col / k;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, image[originRow][originCol]);<br> &nbsp; &nbsp; &nbsp;  }<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br> &nbsp;  }<br><br> &nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汉诺塔一文速通</title>
    <link href="/posts/hanoi/"/>
    <url>/posts/hanoi/</url>
    
    <content type="html"><![CDATA[<h1 id="汉诺塔一文速通"><a href="#汉诺塔一文速通" class="headerlink" title="汉诺塔一文速通"></a>汉诺塔一文速通</h1><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><blockquote><ul><li><strong>有三根柱子，通常标记为 A（起始杆）、B（中转杆）、C（目标杆）。</strong></li><li><strong>开始时，所有的圆盘都按照从大到小的顺序堆叠在一根柱子（假设为 A 柱）上。</strong></li><li><strong>目标是将所有圆盘从起始柱子（A 柱）移动到目标柱子（比如 C 柱）。</strong></li><li><strong>移动过程中有两个重要的规则：每次只能移动一个圆盘；在移动过程中，大圆盘不能放在小圆盘上面。</strong></li></ul></blockquote><p><img src="https://s2.loli.net/2024/12/01/om67z1f3rwFtUqn.png" alt="image-20241201102242192"></p><h3 id="本质分析"><a href="#本质分析" class="headerlink" title="本质分析"></a>本质分析</h3><blockquote><p><strong>实际上，以三个汉诺塔为例，我们需要把最上面两个盘借助C转移到B上，（此时C是中转杆，B是目标杆），再直接将最大的底盘移动到C（目标杆），最后借助A，将B上的n-1个盘转移到C上（此时B是起始杆，A为中转杆，C为目标杆）。</strong></p><p><strong>当汉诺塔的盘数增加，其底层逻辑都不变，依旧是：</strong></p><ul><li><strong>将除底盘外的n-1个底盘移动借助目标杆到中转杆上</strong></li><li><strong>直接将最大底盘移动到目标杆上</strong></li><li><strong>将中转杆上的n-1个盘借助起始杆移动到目标杆上。</strong></li></ul></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">char</span> x,<span class="hljs-type">char</span> y)</span> &nbsp; &nbsp;<span class="hljs-comment">//移动函数，负责输出移动步骤</span></span><br><span class="hljs-function"></span>{<br> &nbsp; &nbsp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c -&gt; %c\n"</span>,x,y);<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">char</span> start,<span class="hljs-type">char</span> temp,<span class="hljs-type">char</span> end)</span><span class="hljs-comment">//第一位是起始，第二位中转，第三位目标</span></span><br><span class="hljs-function"></span>{<br> &nbsp; &nbsp;<span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//如果只有一个盘，可以直接移动</span><br> &nbsp;  {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">print</span>(start,end); &nbsp;<br> &nbsp;  }<br> &nbsp; &nbsp;<span class="hljs-keyword">else</span> {<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">hanoi</span>(n - <span class="hljs-number">1</span>,start,end,temp); &nbsp;<span class="hljs-comment">//将非底盘（n-1）个从起始柱借助目标柱移动到中转柱</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">print</span>(start,end); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">//将底盘从起始站柱子移动到目标柱</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-built_in">hanoi</span>(n - <span class="hljs-number">1</span>,temp,start,end); &nbsp;<span class="hljs-comment">//将非底盘（n-1）从中转柱子借助起始柱移动到目标柱子</span><br> &nbsp;  }<br>}<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br> &nbsp; &nbsp;<span class="hljs-type">int</span> n;<br> &nbsp; &nbsp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br> &nbsp; &nbsp;<span class="hljs-built_in">hanoi</span>(n,<span class="hljs-string">'A'</span>,<span class="hljs-string">'B'</span>,<span class="hljs-string">'C'</span>); &nbsp; <span class="hljs-comment">//这里默认设定A为起始柱，B为中转柱，C为目标柱。</span><br> &nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈优绩主义</title>
    <link href="/posts/meritocracy/"/>
    <url>/posts/meritocracy/</url>
    
    <content type="html"><![CDATA[<h1 id="优绩主义"><a href="#优绩主义" class="headerlink" title="优绩主义"></a>优绩主义</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><strong>也不知道从什么时候开始，我们发现“全员保研”的文章铺天盖地。</strong></p><p><img src="https://s2.loli.net/2024/11/24/rEQ9bZe64qa5IA1.jpg" alt="nimg.ws.126"></p><p><strong>说实话，看到这种信息，我内心不是对优胜者的敬佩和崇拜，而是焦虑，漫无目的地想着我自己的未来，我会保研吗？他们的存在会对我的就业产生威胁吗？</strong></p><p>这就得引出我们今天的主题：<strong>优绩主义</strong>。</p><h1 id="优绩主义-1"><a href="#优绩主义-1" class="headerlink" title="优绩主义"></a>优绩主义</h1><p><strong>先来看看百度百科的定义：社会与经济的奖赏应当依据才能、努力和成就这些“优绩”来决定。人们在机会平等的条件下公平竞争，成绩优异者获胜。因此，最好的大学应当录取成绩最出色的学生，收入最高的职位应当留给最有能力的人才。</strong></p><p>这样的思想催生了一系列的制度，包括我们的高考，我们赏罚分明，唯分数论的方针。我们从小就被打上了思想钢印“<strong>每个人的一天都是24小时，我们努力的机会是均等的，努力的越多，回报就越多，这个世界是公平的。</strong>”</p><p>可是一个又一个天赋哥和富二代的现实提醒我们，这是错的。作为没有天赋的平庸的人，我们常常幻想自己只要通过不断地努力就能超越天赋哥，但现实是为了某一个唯分数论的体制，无数的天赋哥正在以苦行僧的方式和干劲，将自己的时间透支到学习当中，以高于常人数倍的产出效率狠狠地撕碎我们的白日梦。</p><p><em>讲一个作为一个中等生的无聊故事：</em></p><p><strong>很久之前，他曾经取得优异的成绩，在老师的眼中发光发热。可是到了一个新的阶段，他发现自己很普通，他无法在得心应手地处理自己曾经擅长的学科，他身边的好友的学习比他好得多，并且正在逐渐爬向巅峰，而他正在以肉眼可见速度越陷越深，他清楚地知道自己的情况，但他无能为力，他只能眼睁睁看着自己堕落，离曾经的自己越来越远。这时他才明白，抖音评论区的一句话：“</strong>中等生+曾经发过光+偏科+朋友学习好+清醒的堕落=绝杀**”是真的。</p><p>自卑和质疑如同潮水一般涌起，天才精英的傲慢嘲讽和老师一句“<strong>我记得你以前学习挺好的呀</strong>”一并袭来，将他打散，才知道这一切都是，化作了一抹泡影。</p><p>这个世界，不是公平的，天赋就是不公平的最大因素，还有家境背景也是。天赋哥可以自己应对学习，家里有背景的可以让教育资源向自己倾斜，<strong>而只有无能为力的中等生在孤立无援地进行着那辛酸血泪的争斗。</strong>只可惜，无论是天才还是常人，在“唯分数论”的教条下都不会怀疑自己的选择，精英可以凭借高层权力的倾斜张牙舞爪，而常人只能把不堪的现状归根于不够努力的自己，然后又一头扎进毫无进展的生活中去。</p><p>这就是优绩主义带来的副作用，它造就了天才的傲慢和失败者的自卑。这种看似公平的成功观造成精英的傲慢和底层民众的怨恨，使成功者深信其<strong>成功是自身努力的结果</strong>，忘记帮助他们的时机和运气，<strong>轻视着</strong>比自己不幸和缺乏资格的人，<strong>剥削着</strong>，<strong>操控着</strong>不被时运和上帝眷顾的无辜的人们，这便是<strong>优绩的暴政</strong>。</p><p>但也就是在这般束缚下，我们以收入将人分为三六九等，我们以地位将人异化得光怪陆离，<strong>我们也是优绩主义的帮凶。</strong></p><h1 id="对大学生活的思考"><a href="#对大学生活的思考" class="headerlink" title="对大学生活的思考"></a>对大学生活的思考</h1><p><strong>言归正传，再回到我们提到的保研问题上来。我们常常将保研视为大学生活中的一座高峰，似乎只有攀登上去才能证明自己的价值。然而，在优绩主义的影响下，保研竞争变得异常激烈，每个人都在拼命追逐那有限的名额。</strong></p><p>但是我们要注意的是，这是彻彻底底的<strong>零和博弈</strong>，保研名额注定是有限的，他保研就意味着你不能保研，一方的获利必定造成另一方的损失。</p><p>在这种零和博弈的困局中，许多人陷入了无尽的内卷漩涡。他们为了那几个保研指标，日夜苦读，放弃了社交、兴趣爱好甚至是健康。原本充满活力与探索精神的大学生活，被各种考试、竞赛和论文填满，变得单调而压抑。</p><p>大学本应是知识探索与人格塑造的殿堂，而非仅仅是保研竞争的战场。我们应该在大学找到真正的自我，<strong>而不是被世俗定义的成功绑架，不是被优绩主义异化为非人。</strong></p><p><strong>所以，如果你失败了，不是因为你不够努力，束缚你的是世俗强行加给你的价值观。如果你失败了，迎接你的不是死亡与堕落，而是很多的选择和不一样的人生，是无限的可能和不一样的风景。</strong></p><p><strong>所以，</strong></p><p><strong>别再为高考活着。</strong></p><p><strong>别再为绩点活着。</strong></p><p><strong>别再为虚荣活着。</strong></p><p><strong>请为你自己活着。</strong></p><p><img src="https://s2.loli.net/2024/11/26/lGtb6Qgm5LqyYU7.png" alt="930ead712b5e426d82c1ab2e701ebb4f.png"></p>]]></content>
    
    
    <categories>
      
      <category>拾遗阁</category>
      
      <category>随笔</category>
      
      <category>哲学思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我</tag>
      
      <tag>社会</tag>
      
      <tag>和解</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《超脱》：自我与现实的斗争</title>
    <link href="/posts/Detachment/"/>
    <url>/posts/Detachment/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>剧情方面在此不再赘述，笔者建议看看原片，不建议看解说。</strong></p><blockquote><p>**       During the whole of a dull,dark soundless day ** **　　在那年秋季枯燥，灰暗而瞑寂的某个长日里 **</p><p>**　　In the autumn of that year, when the clouds hung oppressively low in heaven ** **　　沉重的云层低悬于天穹之上 **</p><p>**　　I had been passing alone on the horse’s back ** **　　我独自一人策马前行 **</p><p>**　　Through the Singularly,dreary tract in the country ** **　　穿过这片阴沉的，异域般的乡间土地 **</p><p>**　　and at length found myself, as the shades of the evening drew on ** **　　最终，当夜幕缓缓降临的时候 **</p><p>**　　Within the view of melancholy House of Usher ** **　　厄舍府清冷的景色展现在我眼前 **</p><p>**　　I know not how it was ** **　　我未曾目睹它过往的模样 **</p><p>**　　But with the first glimpse of the building, a sense of insufferable gloom pervaded my spirit ** **　　但仅凭方才的一瞥，某种难以忍受的阴郁便浸透了我的内心 **</p><p>**　　I looked upon the scene before me the simple landscape features of the domain ** **　　我望着宅邸周围稀疏的景物 **</p><p>**　　Upon the bleak walls,upon the white trunks of decayed trees ** **　　围墙荒芜，衰败的树遍体透着白色 **</p><p>**　　With the utter depression souls ** **　　我的灵魂失语了 **</p><p>**　　There was an iciness ** **　　我的心在冷却 **</p><p>**　　A sinking. ** **　　下沉 **</p><p>**　　A sickening of the heart ** **　　显出疲软的病态**<br><img src="https://s2.loli.net/2024/11/09/P4pY1JEKksUq8fn.jpg" alt="_1731166957270.jpg"></p></blockquote><h2 id="局外人的无力感"><a href="#局外人的无力感" class="headerlink" title="局外人的无力感"></a>局外人的无力感</h2><p>****影片的开始，日记上赫然写着一句话：“我的灵魂与我之间的距离如此遥远，而我的存在却如此真实。”</p><blockquote><p><strong>Some of us believe that we can make a difference. And then sometimes when we wake up and we realize we failed.</strong></p><p><strong>有些人觉得我们能改变世界，但有时，我们醒来后发现，我们并没有做到。</strong></p></blockquote><p>****亨利和其他老师一样，都是教育工作者，处于职业操守，他们希望学生们变好。但对于一群流里流气的迷茫青年来说，这一点无非天方夜谭。面对这自甘堕落的学生们，我们的老师无能为力，他们无法融入学生的世界里，成为了局外人，也成为了可怜人。有的老师如查理·西博德特教授装疯卖傻地维持着这份毫无意义的工作，有的如刘玉玲老师歇斯底里地表达这自己的愤怒和无奈，有的如亨利无谓地放空内心等待任期结束。包括被资本绑架的女校长，所有的教育者只能眼睁睁地看着自己的学生坠入深不见底的底层。</p><p>****如果把镜头集中亨利一人，这一点体现的更加淋漓尽致。亨利看见了破旧公交车上卖春反被打的少女，看她被欺凌，看她忍饥挨饿，最多只不过是将她带回了自己的家里提供食宿，甚至无法再提供其他任何的帮助。这一切，都因为亨利一人所承受的痛苦已经是泰山一座，关系不清的祖父在养老院苟延残喘，手下的学生目中无人，梅瑞狄斯正在遭受心魔，亨利的心已经被痛苦占据，没有多余的空间留给其他人了。亨利不是耶稣，他不能永久地承载别人的痛苦，最后也迫不得已将少女送入了管教机构，只能看着祖父挣扎着离开这个世界，只能对梅瑞狄斯的尸体做没有意义的人工呼吸。</p><p>****等到影片的后半段，看着狂风吹乱书籍，亨利颓废地坐在讲台中央，一股不可避免的抽离感已从他内心升起，即使他的肉体切切实实存在着，但他似乎感到自己的灵魂已经不再属于这个世界，已经发生了”Detachment”。<br><img src="https://s2.loli.net/2024/11/09/pYoZLCqB3AvJPw1.png" alt="_1731166944959.png"></p><h2 id="畸零人的自我救赎"><a href="#畸零人的自我救赎" class="headerlink" title="畸零人的自我救赎"></a>畸零人的自我救赎</h2><p>**** **** 我们常说，一部只有悲情而不能给人力量的电影是很难流传的，那么《超脱》的力量就来自于存在主义。</p><p>****  自我与荒诞的世界紧密相连，不可分割。每当我们渴望拯救自我、寻求救赎时，却常常深感无力。我们品尝着失败的苦涩，在有限的世界里奋力追逐无限的美好，却只能望而兴叹。也许，世间万物不过是一场自我慰藉的幻梦。若我们将自己全然交予自我，抑或彻底委身于现实，最终恐怕都难逃无尽的虚无、失败与荒谬。</p><p>****<strong>我们曾对世界抱有无限的期望，但如果意外比明天先到，理想坠入万劫不复的深渊，最爱的人与我们阴阳两隔，我们还笑得出来吗？</strong></p><p>****在这样一个世界中，你我都只是以一副躯壳游荡于世间，至于我们的灵魂在哪，没人说得清楚。</p><p>****然而，在影片的后半段，亨利与少女在夕阳之下紧紧相拥，似乎给出了面对这荒诞世界的答案。<br><img src="https://s2.loli.net/2024/11/09/jz4ye71kXYQvZf9.png" alt="QQ20241109234409.png"></p><p>****    在那夕阳的余晖中，亨利与少女的紧紧相拥，仿佛是黑暗世界中的一抹曙光。这一拥抱，不仅仅是两个孤独灵魂的交汇，更是对生活的一种无声抗争，是在荒诞世界中寻找温暖与希望的勇敢尝试。</p><p>****他们的拥抱，是对畸零人生的一种超脱。在这个荒诞的世界里，他们不再是孤独的个体，而是彼此的依靠。他们用这一拥抱告诉世人，即使生活充满了痛苦和无奈，我们仍然可以找到属于自己的温暖和希望，即使都是社会的可怜人也可以相互治愈。</p><p>**<strong>刘玉玲老师在崩溃中大喊：“要无心太容易，但在乎才需要勇气。”如果人对一切都无所谓，无心看待这一切，那就成了真正意义上的躯壳，但我们要做的是拿出勇气和信心，勇于面对过去的离别和不堪，继续自己拥有无限可能的余生，去感知每一次心跳，</strong>才是对生命的尊重，才是对荒诞世界的反抗。**</p>]]></content>
    
    
    <categories>
      
      <category>拾遗阁</category>
      
      <category>随笔</category>
      
      <category>哲学思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言的18个经典实例</title>
    <link href="/posts/exampleofc/"/>
    <url>/posts/exampleofc/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>sizeof是一种关键字，是一个单目运算发，不是函数，但使用方法类似于函数，输出的数据类型为%ld，用法是<code>sizeof(变量名)</code>，返回的是内存大小(字节数)。</p><h3 id="1-判断奇偶数"><a href="#1-判断奇偶数" class="headerlink" title="1.判断奇偶数"></a>1.判断奇偶数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br><span class="hljs-type">int</span> number;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;number);<br><span class="hljs-keyword">if</span> (number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>{<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"偶数"</span>);<br>}<br><span class="hljs-keyword">else</span> <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"奇数"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-表达式值的运用"><a href="#2-表达式值的运用" class="headerlink" title="2.表达式值的运用"></a>2.表达式值的运用</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> isLowercaseVowel, isUppercaseVowel;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个字母: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;c);<br>   <br>    <span class="hljs-comment">// 小写字母元音</span><br>    isLowercaseVowel = (c == <span class="hljs-string">'a'</span> || c == <span class="hljs-string">'e'</span> || c == <span class="hljs-string">'i'</span> || c == <span class="hljs-string">'o'</span> || c == <span class="hljs-string">'u'</span>);<br>   <br>    <span class="hljs-comment">// 大写字母元音</span><br>    isUppercaseVowel = (c == <span class="hljs-string">'A'</span> || c == <span class="hljs-string">'E'</span> || c == <span class="hljs-string">'I'</span> || c == <span class="hljs-string">'O'</span> || c == <span class="hljs-string">'U'</span>);<br>   <br>    <span class="hljs-comment">// if 语句判断</span><br>    <span class="hljs-keyword">if</span> (isLowercaseVowel || isUppercaseVowel)   <span class="hljs-comment">//这里使用了表达式值</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c  是元音"</span>, c);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c 是辅音"</span>, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-内外双层循环"><a href="#3-内外双层循环" class="headerlink" title="3.内外双层循环"></a>3.内外双层循环</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{  <br>    <span class="hljs-comment">//外层循环变量,控制行  </span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  <br>    <span class="hljs-comment">//内层循环变量,控制列   </span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;   <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++){  <br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++){  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%dx%d=%d\t"</span>,j,i,i*j);  <br>        }  <br>        <span class="hljs-comment">//每行输出完后换行   </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);   <br>    }  <br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="4-GCD的另一种算法"><a href="#4-GCD的另一种算法" class="headerlink" title="4.GCD的另一种算法"></a>4.GCD的另一种算法</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;a, &amp;b);<br>    <span class="hljs-keyword">while</span> (b !=<span class="hljs-number">0</span> ){<br>        t = a%b;<br>        a = b;<br>        b = t;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a=%d b=%d t=%d\n"</span>,a , b, t);<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"最大公约数是%d\n"</span>, a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="4-阶乘"><a href="#4-阶乘" class="headerlink" title="4.阶乘"></a>4.阶乘</h3><h4 id="正序循环："><a href="#正序循环：" class="headerlink" title="正序循环："></a>正序循环：</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> factorial = <span class="hljs-number">1</span>;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个整数: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br> <br>    <span class="hljs-comment">// 如果输入是负数，显示错误</span><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error! 负数没有阶乘jiechen"</span>);<br> <br>    <span class="hljs-keyword">else</span><br>    {<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>        {<br>            factorial *= i;              <span class="hljs-comment">// factorial = factorial*i;</span><br>        }<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d! = %llu"</span>, n, factorial);<br>    }<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}   <span class="hljs-comment">//顺序法，从1乘到n</span><br></code></pre></td></tr></tbody></table></figure><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">multiplyNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个整数: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d! = %ld"</span>, n, multiplyNumbers(n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">multiplyNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>    <span class="hljs-comment">//此处的函数在不满足if时会触发递归循环</span><br>{<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> n*multiplyNumbers(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="5-数位判断"><a href="#5-数位判断" class="headerlink" title="5.数位判断"></a>5.数位判断</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个整数: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;n);<br> <br>    <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>)<br>    {<br>        n /= <span class="hljs-number">10</span>;   <span class="hljs-comment">//注意这里不是%10</span><br>        ++count;<br>    }<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"数字是 %d 位数。"</span>, count);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="6-斐波那契"><a href="#6-斐波那契" class="headerlink" title="6.斐波那契"></a>6.斐波那契</h3><h4 id="指定个数"><a href="#指定个数" class="headerlink" title="指定个数"></a>指定个数</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> i, n, t1 = <span class="hljs-number">0</span>, t2 = <span class="hljs-number">1</span>, nextTerm;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输出几项: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"斐波那契数列: "</span>);<br> <br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d, "</span>, t1);<br>        nextTerm = t1 + t2;<br>        t1 = t2;<br>        t2 = nextTerm;      <span class="hljs-comment">//这三步使得计算往后挪动1个单位</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="7-整型数字翻转"><a href="#7-整型数字翻转" class="headerlink" title="7.整型数字翻转"></a>7.整型数字翻转</h3><h4 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> n, reversedInteger = <span class="hljs-number">0</span>, remainder, originalInteger;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个整数: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br> <br>    originalInteger = n;<br> <br>    <span class="hljs-comment">// 翻转</span><br>    <span class="hljs-keyword">while</span>( n!=<span class="hljs-number">0</span> )<br>    {<br>        remainder = n%<span class="hljs-number">10</span>;<br>        reversedInteger = reversedInteger*<span class="hljs-number">10</span> + remainder; <span class="hljs-comment">//这里无需设置数位变量</span><br>        n /= <span class="hljs-number">10</span>;<br>    }<br> <br>    <span class="hljs-comment">// 判断</span><br>    <span class="hljs-keyword">if</span> (originalInteger == reversedInteger)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d 是回文数。"</span>, originalInteger);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d 不是回文数。"</span>, originalInteger);<br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="使用字符串："><a href="#使用字符串：" class="headerlink" title="使用字符串："></a>使用字符串：</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span>  <span class="hljs-comment">//处理字符串和内存块的库</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">12021</span>;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">10</span>]={<span class="hljs-string">'\0'</span>},s1[<span class="hljs-number">10</span>]={<span class="hljs-string">'\0'</span>};<br>    <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">"%d"</span>,a); <span class="hljs-comment">// 将整数转换为字符串</span><br>    <span class="hljs-type">int</span> n=<span class="hljs-built_in">strlen</span>(s);   <span class="hljs-comment">//字符串长度，这一步可以用循环实现，用"/0";</span><br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    {<br>        s1[j++]=s[i];<br>    }<br>    <span class="hljs-comment">//s[j]='\0';</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s %s\n"</span>,s,s1);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(s,s1))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"整数%d是回文串"</span>,a);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"整数%d不是回文串"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="8-表格形式输出数据"><a href="#8-表格形式输出数据" class="headerlink" title="8.表格形式输出数据"></a>8.表格形式输出数据</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>   <span class="hljs-type">int</span> i, j, count;<br> <br>   <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) {<br>      <span class="hljs-keyword">for</span>(j = i; j &lt;=<span class="hljs-number">100</span>; j += <span class="hljs-number">10</span> ) <span class="hljs-comment">//标准双层循环</span><br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %3d"</span>, j);   <span class="hljs-comment">//限制列宽</span><br> <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>   }<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="9-数组拷贝"><a href="#9-数组拷贝" class="headerlink" title="9.数组拷贝"></a>9.数组拷贝</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>   <span class="hljs-type">int</span> original[<span class="hljs-number">10</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>};<br>   <span class="hljs-type">int</span> copied[<span class="hljs-number">10</span>];<br>   <span class="hljs-type">int</span> loop;<br>   <br>   <span class="hljs-keyword">for</span>(loop = <span class="hljs-number">0</span>; loop &lt; <span class="hljs-number">10</span>; loop++) {    <span class="hljs-comment">//单循环遍历整个数组</span><br>      copied[loop] = original[loop];<br>   }<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"元素数组 -&gt; 拷贝后的数组 \n"</span>);<br>   <br>   <span class="hljs-keyword">for</span>(loop = <span class="hljs-number">0</span>; loop &lt; <span class="hljs-number">10</span>; loop++) {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"   %2d        %2d\n"</span>, original[loop], copied[loop]);<br>   }<br> <br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>约瑟夫环</p><h3 id="10-分解某数作为两个素数的和"><a href="#10-分解某数作为两个素数的和" class="headerlink" title="10.分解某数作为两个素数的和"></a>10.分解某数作为两个素数的和</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">checkPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> n, i, flag = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入正整数: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">2</span>; i &lt;= n/<span class="hljs-number">2</span>; ++i)<br>    {<br>        <span class="hljs-comment">// 检测判断</span><br>        <span class="hljs-keyword">if</span> (checkPrime(i) == <span class="hljs-number">1</span>)<br>        {<br>            <span class="hljs-keyword">if</span> (checkPrime(n-i) == <span class="hljs-number">1</span>)         <span class="hljs-comment">//n-i减少了变量设置</span><br>            {<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d = %d + %d\n"</span>, n, i, n - i);<br>                flag = <span class="hljs-number">1</span>;<br>            }<br> <br>        }<br>    }<br> <br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d 不能分解为两个素数。"</span>, n);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br> <br><span class="hljs-comment">// 判断素数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">checkPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>{<br>    <span class="hljs-type">int</span> i, isPrime = <span class="hljs-number">1</span>;<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">2</span>; i &lt;= n/<span class="hljs-number">2</span>; ++i)<br>    {<br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)<br>        {<br>            isPrime = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        }  <br>    }<br> <br>    <span class="hljs-keyword">return</span> isPrime;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="11-字符串翻转"><a href="#11-字符串翻转" class="headerlink" title="11.字符串翻转"></a>11.字符串翻转</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverseSentence</span><span class="hljs-params">()</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个字符串: "</span>);<br>    reverseSentence();<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">reverseSentence</span><span class="hljs-params">()</span>     <span class="hljs-comment">//递归写法，不读到回车不会停止</span><br>{<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>, &amp;c);<br> <br>    <span class="hljs-keyword">if</span>( c != <span class="hljs-string">'\n'</span>)<br>    {<br>        reverseSentence();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,c);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="12-冒泡法排序"><a href="#12-冒泡法排序" class="headerlink" title="12. 冒泡法排序"></a>12. 冒泡法排序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 交换两个整数的函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> {<br>    <span class="hljs-type">int</span> temp = *a;<br>    *a = *b;<br>    *b = temp;<br>}<br><br><span class="hljs-comment">// 冒泡排序函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> {<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) {<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++) {<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br>                swap(&amp;arr[j], &amp;arr[j + <span class="hljs-number">1</span>]);<br>            }<br>        }<br>    }<br>}<br><br><span class="hljs-comment">// 打印数组元素的函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> {<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, arr[i]);<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">int</span> arr[] = {<span class="hljs-number">64</span>, <span class="hljs-number">34</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">90</span>};<br>    <span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"排序前的数组: "</span>);<br>    printArray(arr, n);<br><br>    bubbleSort(arr, n);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"排序后的数组: "</span>);<br>    printArray(arr, n);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="13-矩阵相加"><a href="#13-矩阵相加" class="headerlink" title="13.矩阵相加"></a>13.矩阵相加</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{<br>    <span class="hljs-type">int</span> r, c, a[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>], b[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>], sum[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>], i, j;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入行数 ( 1 ~ 100): "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;r);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入列数 ( 1 ~ 100): "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;c);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n输入第一维数组的元素:\n"</span>);<br> <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;r; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c; ++j)<br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入元素 a%d%d: "</span>,i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i][j]);<br>        }<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入第二维数组的元素:\n"</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;r; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c; ++j)<br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入元素 a%d%d: "</span>,i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;b[i][j]);<br>        }<br> <br>    <span class="hljs-comment">// 相加</span><br> <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;c;++j)<br>        {<br>            sum[i][j]=a[i][j]+b[i][j];<br>        }<br> <br>    <span class="hljs-comment">// 显示结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n二维数组相加结果: \n\n"</span>);<br> <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;c;++j)<br>        {<br> <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d   "</span>,sum[i][j]);<br> <br>            <span class="hljs-keyword">if</span>(j==c<span class="hljs-number">-1</span>)<br>            {<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n\n"</span>);<br>            }<br>        }<br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="14-矩阵转置"><a href="#14-矩阵转置" class="headerlink" title="14.矩阵转置"></a>14.矩阵转置</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>], transpose[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>], r, c, i, j;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入矩阵的行与列: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;r, &amp;c);<br> <br>    <span class="hljs-comment">// 存储矩阵的元素</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n输入矩阵元素:\n"</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;r; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c; ++j)<br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入元素 a%d%d: "</span>,i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i][j]);<br>        }<br> <br>    <span class="hljs-comment">// 显示矩阵 a[][] */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n输入矩阵: \n"</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;r; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c; ++j)<br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d  "</span>, a[i][j]);<br>            <span class="hljs-keyword">if</span> (j == c<span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n\n"</span>);<br>        }<br> <br>    <span class="hljs-comment">// 转换</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;r; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c; ++j)<br>        {<br>            transpose[j][i] = a[i][j];<br>        }<br> <br>    <span class="hljs-comment">// 显示转换后的矩阵 a</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n转换后矩阵:\n"</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;c; ++i)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;r; ++j)<br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d  "</span>,transpose[i][j]);<br>            <span class="hljs-keyword">if</span>(j==r<span class="hljs-number">-1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n\n"</span>);<br>        }<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="15-连接字符串"><a href="#15-连接字符串" class="headerlink" title="15.连接字符串"></a>15.连接字符串</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> s1[<span class="hljs-number">100</span>], s2[<span class="hljs-number">100</span>], i, j;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入第一个字符串: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s1);          <span class="hljs-comment">//如果是%c，读入一个就停止</span><br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入第二个字符串: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s2);<br> <br>    <span class="hljs-comment">// 计算字符串 s1 长度</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; s1[i] != <span class="hljs-string">'\0'</span>; ++i);<br> <br>    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; s2[j] != <span class="hljs-string">'\0'</span>; ++j, ++i)<br>    {<br>        s1[i] = s2[j];<br>    }<br> <br>    s1[i] = <span class="hljs-string">'\0'</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"连接后: %s"</span>, s1);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="16-获取字符串长度"><a href="#16-获取字符串长度" class="headerlink" title="16.获取字符串长度"></a>16.获取字符串长度</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> len;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入字符串: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s);<br>    len = <span class="hljs-built_in">strlen</span>(s);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"字符串长度: %d"</span>, len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>], i;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入字符串: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s);<br> <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">'\0'</span>; ++i);<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"字符串长度: %d"</span>, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="17-字符类型的统计"><a href="#17-字符类型的统计" class="headerlink" title="17.字符类型的统计"></a>17.字符类型的统计</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">150</span>];<br>    <span class="hljs-type">int</span> i, vowels, consonants, digits, spaces;<br> <br>    vowels =  consonants = digits = spaces = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入一个字符串: "</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%[^\n]"</span>, line);      <span class="hljs-comment">//这会使scanf遇到回车才停止，但这不是一种标准用法。</span><br> <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; line[i]!=<span class="hljs-string">'\0'</span>; ++i)<br>    {<br>        <span class="hljs-keyword">if</span>(line[i]==<span class="hljs-string">'a'</span> || line[i]==<span class="hljs-string">'e'</span> || line[i]==<span class="hljs-string">'i'</span> ||<br>           line[i]==<span class="hljs-string">'o'</span> || line[i]==<span class="hljs-string">'u'</span> || line[i]==<span class="hljs-string">'A'</span> ||<br>           line[i]==<span class="hljs-string">'E'</span> || line[i]==<span class="hljs-string">'I'</span> || line[i]==<span class="hljs-string">'O'</span> ||<br>           line[i]==<span class="hljs-string">'U'</span>)<br>        {<br>            ++vowels;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((line[i]&gt;=<span class="hljs-string">'a'</span>&amp;&amp; line[i]&lt;=<span class="hljs-string">'z'</span>) || (line[i]&gt;=<span class="hljs-string">'A'</span>&amp;&amp; line[i]&lt;=<span class="hljs-string">'Z'</span>))<br>        {<br>            ++consonants;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(line[i]&gt;=<span class="hljs-string">'0'</span> &amp;&amp; line[i]&lt;=<span class="hljs-string">'9'</span>)<br>        {<br>            ++digits;<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line[i]==<span class="hljs-string">' '</span>)<br>        {<br>            ++spaces;<br>        }<br>    }<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"元音: %d"</span>,vowels);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n辅音: %d"</span>,consonants);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n数字: %d"</span>,digits);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n空白符: %d"</span>, spaces);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="18-约瑟夫环问题"><a href="#18-约瑟夫环问题" class="headerlink" title="18.约瑟夫环问题"></a>18.约瑟夫环问题</h3><blockquote><p>约瑟夫环（Josephus Problem）是一个经典的数学和计算机科学问题。问题是这样的：有 n个人围成一圈，从某个人开始顺序编号为1,2,3,4,····n 。从编号为 1的人开始报数，报到 m的人出列，然后下一个人重新从 1开始报数，报到 m的人又出列，如此循环，直到所有的人都出列为止。求出列的顺序。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> {<br>    <span class="hljs-type">int</span> people[n];<br>    <span class="hljs-comment">// 初始化数组，0表示未出列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        people[i] = <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 记录已经出列的人数</span><br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 报数的索引</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;    <span class="hljs-comment">// 报数的数字</span><br>    <span class="hljs-keyword">while</span> (count &lt; n) {<br>        <span class="hljs-keyword">if</span> (people[index] == <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">if</span> (num == m) {<br>                people[index] = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, index + <span class="hljs-number">1</span>);<br>                count++;<br>                num = <span class="hljs-number">1</span>;<br>            } <span class="hljs-keyword">else</span> {<br>                num++;<br>            }<br>        }<br>        index = (index + <span class="hljs-number">1</span>) % n;<br>    }<br>}<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">7</span>;  <span class="hljs-comment">// 总人数</span><br>    <span class="hljs-type">int</span> m = <span class="hljs-number">3</span>;  <span class="hljs-comment">// 报数到m的人出列</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"出列顺序为: "</span>);<br>    josephus(n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灯塔</title>
    <link href="/posts/lighthouse/"/>
    <url>/posts/lighthouse/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这应该早就开始写了，现在就把存在脑海里几个月的思绪写下来。</p></blockquote><p>在HDU的一个月，我看见了形形色色的人和事，军训场上的歌者和舞者，舞台上的演员，他们仿佛在展示着青春不同的样子。这对一个来自小城镇的KID来说有点受宠若惊。但同时，见过花园之后就是迷茫，别人的青春如此，我呢？</p><h2 id="你要为你的未来做什么呢？"><a href="#你要为你的未来做什么呢？" class="headerlink" title="你要为你的未来做什么呢？"></a>你要为你的未来做什么呢？</h2><p>我们来讲一个故事，孙悟空跟着菩提老祖跟了7年，学到的本身，打穿天庭，一路降妖除魔，修得正果“斗战胜佛”。为什么这泼猴只学了7年，成就就已经超过了老祖的大半徒弟，我觉得是因为泼猴只盯着“长生”二字，不得长生二字不学，因此习得实用的技能，成了圣佛。这就对上了他说的那两句“<strong>求仙问卜不如自己做主，念佛诵经不如本事在身。”</strong><br>​      说句实话，现在的失业率暂停发布，就业形势并不大好。父母用一袋子钱为我们换来了一袋子书，但是我们有这个把握能用这一袋子书重新换来一袋子钱吗？这是个问题。<br>​      一个善于学习的人能提供的价值，比很多平庸的人在学校里虚度十六年光阴以后能拿出来的东西实用得多。学习和工作是未来人生的主线任务，是未来几十年你赖以生存的基础。一切其他事情，都是伴随工作左右的。毕业大家都拿到同一份工资，不代表毕业五年后大家依然拿同一份工资。<br>因此，变得优秀，不让以后的自己感到悔恨，是大学的主线任务。</p><h2 id="我想成为一个什么样的人"><a href="#我想成为一个什么样的人" class="headerlink" title="我想成为一个什么样的人"></a>我想成为一个什么样的人</h2><p><strong>1.加入ACM集训队</strong><br>这是一个很困难的目标，电专的竞赛强度有目共睹，我只能抱着试一试的心态去尝试。杭电有十七个分队，即使我不能加入其中，也能用所学参加Codeforce等个人赛，技多不压身。<br><strong>2.放弃社恐，收放自如</strong><br>内向不代表扭扭捏捏，我们需要的是能够将自己的想法简明地告知别人的交际能力。这种能力可以不用，但不能没有。<br>不要怕做的不好，很多过去的事情不需要原谅，<strong>因为没人记得。</strong><br><strong>3.控制自己的欲望。</strong><br><strong>欲望的背后绝非自由，而是更深重的桎梏。</strong><br>从欲望的绑架中脱离，我们才知道我们真正想做的是什么。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>人生的路本可以很轻松，只是笔者和读者选择变得更加优秀，既然如此，就将选择的路一直走下去，也许这样<br><strong>直到晚年</strong></p><p><strong>我们才能称自己为爱人</strong></p><p><strong>和感到</strong></p><p><strong>被这个世界爱过。</strong></p><p><img src="https://s2.loli.net/2024/10/16/z2XOuBPsi9vVK3y.jpg" alt="https://s2.loli.net/2024/10/16/z2XOuBPsi9vVK3y.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我</tag>
      
      <tag>随感</tag>
      
      <tag>未来</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的月光</title>
    <link href="/posts/newmoonlight/"/>
    <url>/posts/newmoonlight/</url>
    
    <content type="html"><![CDATA[<h2 id="新的月光"><a href="#新的月光" class="headerlink" title="新的月光"></a>新的月光</h2><p>WillMo博士颓废地坐在鱼冢里，在O5的注视中沉默地迎接晨曦的到来。</p><p>O5回到了他们的圆桌上，MTF收起了枪，随着打卡机的响起，所有的Site又开始了新的呼吸。</p><p>WillMo博士大概确实是与过去诀别了，他将所有关于研究员Lucy的物件都锁在了他办公室无人知晓的角落里。</p><blockquote><p><strong>您有一封新的邮件，请查收。</strong></p><p><strong>-打开</strong></p><p><strong>信息分析部门主管WillMo博士：</strong></p><p>我们的特工突袭了Are We Cool Yet?的一处地点，并缴获了一系列异常项目，相关资料已在附件中给出。其中的一项是一个布满花纹的USB存储设备，我们需要你和你的部门分析其存储原理并尽可能分析其异常性质的来源。如果可以，请在10.4日前将检测报告发送给<br>Ruby博士。</p><p>——艺术异常部副主管Lucy</p></blockquote><p>博士看着这熟悉的署名，感到一股陌生和茫然，但鱼冢里的墓碑很快就把他拉回了现实。</p><p>“同名的“他抱着这样的念头，打开了那台布满灰尘的终端。<br>…….</p><blockquote><p><strong>您的邮件已发送。</strong></p></blockquote><p>最终执念还是战胜了理性，他迫不及待打开基金会的职员数据库，查询了”Lucy”这个字段，然后焦急地等待回应。</p><blockquote><p><strong>员工编号：[权限不足]</strong></p><p><strong>姓名：Lucy ▆▆▆▆</strong></p><p><strong>性别：女</strong></p><p><strong>出生日期：[权限不足]</strong></p><p><strong>国籍：[权限不足]</strong></p><p><strong>所属站点：Site-69</strong></p><p><strong>职位：4级部门副主管</strong></p><p><strong>入职日期：[权限不足]</strong></p><p><strong>安全许可等级：4级</strong></p><p><strong>专长：对研究艺术类异常项目有敏锐感知力，已被指派追踪GOI”Are We Cool yet”。</strong></p></blockquote><p>WillMo博士盯着这几行有限的信息，记起了同级权限人员的信息只能有限查阅。<br>“这是O5的阴谋，还是说只是一个同名者呢？”WillMo博士这样想着，直到夜色吞没了他的思绪。<br> ………<br>大梦一场过后，年轻的博士觉得这位同事的身份已经无关紧要，真正有价值的是那个熟悉的名字。曾经他很弱小，躲在沉默后面对Lucy投以注视，一幕又一幕的背影，在他的自卑下似乎套上了一层神的光辉，就此，成为里无数个月夜中辗转反侧的白月光。但是等他足够强大，带着鲜花和底气来见她时，迎接他的只是一座孤零零的坟墓。而现在，这个名字的出现好像是上帝给的另一次机会，让他能够在余生中将自己从遗憾中拯救回来，去保护那个曾经未能保护的人。</p><p><strong>灯光从窗户透过，WillMo博士正在进行他自己的救赎。</strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原码，反码，补码一文速通</title>
    <link href="/posts/d6c660ac/"/>
    <url>/posts/d6c660ac/</url>
    
    <content type="html"><![CDATA[<h2 id="机器数：万物之基"><a href="#机器数：万物之基" class="headerlink" title="机器数：万物之基"></a>机器数：万物之基</h2><p><strong>就是二进制数，这些而二进制数能够被机器理解并执行。</strong></p><p><strong>机器数带有符号，计算机字长为8位，所以最高位代表符号，</strong>正数是0<strong>，</strong>负数是1<strong>，例如0000 0011就表示+3，1000 0011就代表-3。</strong> <strong>以上的0000 0011就是机器数。</strong></p><h2 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h2><p>带符号位的机器数对应的十进制数就是<strong>机器数的真值</strong>。例如: 0000 0011=+000 0011=+3</p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>即最基本的使用二进制代表十进制，<strong>是人脑最容易理解的表示方式</strong>。</p><p><strong>[+1]原=0000 0001</strong></p><p><strong>第一位不表示值，只表示正负。</strong></p><p><strong>[1111 1111]代表-127</strong></p><p><strong>注：原码的0有两种表示形式：0000 0000和1000 0000</strong></p><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p><strong>正数的反码是其本身；</strong></p><p><strong>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</strong></p><p><strong>[+1] = [0000 0001]原= [0000 0001]反</strong></p><p><strong>[-1] = [1000 0001]原= [1111 1110]反</strong></p><p><strong>如果一个反码表示的是负数，人脑****无法直观的看出来</strong>它的数值。通常要将其转换成原码再计算。</p><p><strong>注：0的反码也有两种：0000 0000和1111 1111</strong></p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p><strong>正数的补码还是其本身；</strong></p><p><strong>负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(也即在反码的基础上+1)</strong></p><p><strong>[+1] = [0000 0001]原= [0000 0001]反= [0000 0001]补</strong></p><p><strong>[-1] = [1000 0001]原= [1111 1110]反= [1111 1111]补</strong></p><p><em>原码，反码，补码是表示同一个数字的三种不同形式。</em></p><h2 id="为什么要有补码和反码？"><a href="#为什么要有补码和反码？" class="headerlink" title="为什么要有补码和反码？"></a>为什么要有补码和反码？</h2><p><strong>计算十进制的表达式： 1 - 1 = 0</strong></p><p><strong>1 - 1 = 1 + (-1) = [0000 0001]原+ [1000 0001]原= [1000 0010]原= -2</strong></p><p><strong>如果用原码表示，让符号位也参与计算，显然对于减法来说，结果是不正确的。这也就是为何计算机内部不使用原码表示一个数。</strong></p><p><strong>为了解决原码做减法的问题， 出现了反码：</strong></p><p><strong>计算十进制的表达式：1 - 1 = 0</strong></p><p><strong>1 - 1 = 1 + (-1) = [0000 0001]原+ [1000 0001]原= [0000 0001]反+ [1111 1110]反= [1111 1111]反= [1000 0000]原= -0</strong></p><p><strong>发现用反码计算减法，结果的真值部分是正确的。而唯一的问题其实就出现在”0”这个特殊的数值上，虽然人们理解上</strong><strong>+0和-0</strong>是一样的，但是0带符号是没有任何意义的，而且会有[0000 0000]原和[1000 0000]原两个编码表示0。</p><p><strong>于是补码的出现，解决了0的符号问题以及0的两个编码问题：</strong></p><p><strong>1-1 = 1 + (-1) = [0000 0001]原+ [1000 0001]原= [0000 0001]补+ [1111 1111]补= [1 0000 0000]补=[0000 0000]补=[0000 0000]原注意：进位1不在计算机字长里。</strong></p><p><strong>这样0用[0000 0000]表示，而以前出现问题的-0则不存在了。而且可以用[1000 0000]表示-128：-128的由来如下：</strong></p><p><strong>(-1) + (-127) = [1000 0001]原+ [1111 1111]原= [1111 1111]补+ [1000 0001]补= [1000 0000]补</strong></p><p><strong>-1-127的结果应该是-128，在用补码运算的结果中，[1000  0000]补就是-128，但是注意因为实际上是使用以前的-0的补码来表示-128，所以-128并没有原码和反码表示。(对-128的补码表示[1000 0000]补，算出来的原码是[0000 0000]原，这是不正确的)</strong></p><p><strong>使用补码，不仅仅修复了0的符号以及存在两个编码的问题，而且还能够多表示一个最低数。这就是为什么8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]。</strong></p><p><strong>因为机器使用补码，所以对于编程中常用到的有符号的32位int类型，可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位，而使用补码表示时又可以多保存一个最小值。</strong></p>]]></content>
    
    
    <categories>
      
      <category>网络工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WillMo的人事档案</title>
    <link href="/posts/e6ed99b1/"/>
    <url>/posts/e6ed99b1/</url>
    
    <content type="html"><![CDATA[<h2 id="SCP-人事档案"><a href="#SCP-人事档案" class="headerlink" title="SCP 人事档案"></a>SCP 人事档案</h2><p><strong>员工编号：21-1944</strong></p><p><strong>姓名：WillMo ▆▆▆▆</strong></p><p><strong>性别：女</strong></p><p><strong>出生日期：05/11/9</strong></p><p><strong>最高教育经历:杭州▆▆▆▆大学 研究生</strong></p><p><strong>国籍：中国</strong></p><p><strong>所属站点：Site-CN-21</strong></p><p><strong>职位：特遣特工，3级网络工程师</strong></p><p><strong>入职日期：26/09/25</strong></p><p><strong>安全许可等级：3级</strong></p><h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>WillMo在网络运维方面拥有卓越的专业知识和丰富的经验。2024/06/12，WillMo曾“意外”骇入基金会内部网络而被派遣的MTF逮捕。鉴于其良好合作态度和过硬的技术，WillMo被允许在基金会工作并享受相关福利。</p><p><strong>专业技能：</strong></p><ul><li>应急处理基金会内网入侵情况，维护基金会网络资产的安全。</li><li>在程序架构和智能控制方面具有出色的能力，能够协助相关部门进行开发工作。</li><li>熟练掌握多种语言，包括英语和汉语，便于与不同背景的人员进行沟通和合作。</li><li>精通级特殊载具驾驶(特种车辆、牵引运载车辆、歼击机、空天战斗机，电子对抗飞机等)，以便执行任务时尽快到达指定地点或执行基金会任务。</li><li>基本级使用标准枪械（手枪，突击步枪，狙击步枪等），以便保护站点和任务期间攻击敌对GOI成员甚至异常个体。</li><li>专家级使用重型异常武器（单兵恶魔学防御系统，奇术步枪等），即使该技能已被道德伦理委员会证明为非法获取，但仍能够允许其在高危战况下保护基金会资产甚至摧毁大型异常实体和其他GOI大型载具。</li></ul><p><strong>工作记录：</strong></p><ul><li><strong>协同工程部门共同开发了基金会太空武器-“灵弩”。</strong><br><img src="https://s2.loli.net/2024/09/07/ygkp6EIjtHLefQY.jpg" alt="freecompress-768024303850541199_3_.jpg"></li></ul><blockquote><p>WillMo博士对接“灵弩”时的记录</p></blockquote><ul><li><p>注意到与其年龄和入职时间不符合的技能掌握程度，道德伦理委员会对WillMo博士展开调查并证实其使用了多重非法手段（包括但不限于违规使用异常项目▆▆▆▆等手段）迅速获取了一系列技能，并对其提出弹劾，后被O5议会将提案降级为警告处罚。</p><ul><li>被O5议会配发特别行动令牌，以便收容失效时打开4级权限以下的防爆门。<br><img src="https://s2.loli.net/2024/09/08/SLFyBYnsAM7VKwI.jpg" alt="_W_VWV__TYXR_XWV__S_MVF.jpg"></li></ul></li></ul><blockquote><p>特别行动令牌</p></blockquote><p><strong>心理评估：</strong></p><p><strong>显示出中度的心理稳定性和适应能力，但在面对高压力和特殊异常情况时较难保持冷静和理智。</strong></p><p><strong><del>对欠薪的情况十分抗拒甚至抱有敌意</del>工作情绪稳定，但薪资需要按时发放。</strong></p><p><strong>禁止任何非心理部门的员工在WillMo博士面前提起王▆▆特工，违者将被行政处罚。</strong></p><p><strong>异常效应</strong></p><blockquote><p>现已确认WillMo博士收到AE-231的严重影响</p></blockquote><p><strong>AE-231表现为一种周期性异常现象，周期为7天。在此周期内，AE-231将引发一种与受影响个体高度相似的实体（以下简称AE-231-1）在指定空间内形成，并立即对受影响个体发起攻击。AE-231-1展现出与受影响个体相同的武器操作能力和战斗技巧，并能够自由操纵受影响个体在异常效应期间使用过的所有武器。</strong></p><p><strong>AE-231的影响还包括在受影响区域内生成大量黑色块状物质，这些物质对所有已知破坏手段免疫，且会阻塞该空间与外界的通道。此外，AE-231影响区域内的所有摄像设备均会受到严重干扰，无法提供有效图像。</strong></p><p><strong>在AE-231的影响下，若受影响个体死亡，黑色块状物质将自燃而不释放热量，AE-231-1将消失。若AE-231-1死亡，受影响个体的伤势将迅速自愈，黑色块状物质将逐渐消散。</strong></p><p><strong>备注</strong></p><p>“请求给他配备基金会的便携式能量武器，我们应该让特工出身的他有能力用特殊的武器保护自己，而不是看着他在肉搏中遭遇意外。”</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">------特工紫罗兰</span><br></code></pre></td></tr></tbody></table></figure><p>“我理解你说的，但别忘了AE-231-1的武器也会随之变化，更强大的武器只会让他的不确定因素增加。我们一方面会找到破局之法，一方面会为他提供更高强度的战斗训练，我们会尽最大努力保护为基金会做过贡献的职员。”                                                —–人事主任Dr.▆▆</p><p><strong>邮件记录</strong></p><blockquote><p>致O5-1：</p><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">如你所见，我的情况不容乐观，但世界的情况比我要糟得多。人类是被宣判了死刑的囚徒，而我只是一个彻头彻尾的赌徒。我请求议会停止所有试图解除我异常效应的探索，把经费和人力资源移交到更重要的事业上去。我在和AE<span class="hljs-string">-231</span><span class="hljs-string">-1</span>中不止尝到了痛苦，我还知道他是过去的特工束影，他试图杀死我，取代我，变得比上一次更强，才是我活下去唯一的办法，才是人类走下去得唯一道路。<br></code></pre></td></tr></tbody></table></figure><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-----Dr.WillMo</span><br></code></pre></td></tr></tbody></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scp</tag>
      
      <tag>档案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题自定义界面使用markdown</title>
    <link href="/posts/379e7120/"/>
    <url>/posts/379e7120/</url>
    
    <content type="html"><![CDATA[<p>创建自定义界面时，使用以下格式即可，可继承hexo对markdown的特定渲染。</p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"markdown-body"</span>&gt;<br>正文<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未来计划</title>
    <link href="/posts/db95087c/"/>
    <url>/posts/db95087c/</url>
    
    <content type="html"><![CDATA[<h1 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h1><h2 id="1-顶级期刊"><a href="#1-顶级期刊" class="headerlink" title="1.顶级期刊"></a>1.顶级期刊</h2><p>**可以找老师要，上面论文要多看看，目前已知(待验证)**<strong>Computer Networks</strong></p><p><strong>Journal of Network and Computer Applications</strong></p><p><strong>International Journal of Communication Systems</strong></p><p><strong>Wireless Networks</strong></p><p><strong>Computer Communications</strong></p><h2 id="2-行业现实很重要"><a href="#2-行业现实很重要" class="headerlink" title="2.行业现实很重要"></a>2.行业现实很重要</h2><p><strong>（无论科研还是就业，①参考取景框看世界的专业和行业深度解读视频②各类机构针对该行业的最新行业报告注意是行业不是专业。)</strong></p><h2 id="3-AI大模型"><a href="#3-AI大模型" class="headerlink" title="3.AI大模型"></a>3.AI大模型</h2><p><strong>（Al工具：文心一言，讯飞星火，豆包，kimi等下集更详细）</strong></p><h2 id="4-多媒体技能"><a href="#4-多媒体技能" class="headerlink" title="4.多媒体技能"></a>4.多媒体技能</h2><p><strong>（首推：图片和视频处理。比较推荐做自媒体，只是推荐没说必须，自行选择哟。电脑上：Adobe全家桶中的PS和PR）</strong></p><h2 id="5-办公自动化技能"><a href="#5-办公自动化技能" class="headerlink" title="5.办公自动化技能"></a>5.办公自动化技能</h2><p><strong>（技能建议大家采用需求导向学习：先看入门的基础教程or教材，然后打住，具体运用中碰到实际问题再针对学习进阶的技巧和操作）</strong></p><h2 id="6-理工农科"><a href="#6-理工农科" class="headerlink" title="6.理工农科"></a>6.理工农科</h2><p><strong>（熟练掌握学科要求的软件还有编程]专业英语要打磨好哟，因为学校要求一般是SCI的英文期刊。）</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>可以关注其他专业和自己专业的结合点针对展开其他领域的技能学习)</strong></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><strong>当我写下这份文档，过去的一切已与我彻底诀别，不顾过去，循此苦旅，直抵群星。       ——Dr.WillMo</strong></p><p>2024年8月31日</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自我</tag>
      
      <tag>计划</tag>
      
      <tag>坚持</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>孤独之旅</title>
    <link href="/posts/4553e66c/"/>
    <url>/posts/4553e66c/</url>
    
    <content type="html"><![CDATA[<h1 id="孤独之旅"><a href="#孤独之旅" class="headerlink" title="孤独之旅"></a>孤独之旅</h1><p>PS:好友写的文，走向成熟与独立是我们每个人的必经之路，特此纪念。              ——WillMo</p><p>开学报告的那一天，公寓楼里楼外都挤满了许多的新生和他们的家长。家长们含辛茹苦地帮孩子打理了几乎所有的东西。</p><p>然而，这个来自遥远的南方的男孩却显得格格不入:蓬头垢面，孤零零一人拖着一堆的行李。在如山高的人海中，他是那么的矮小。</p><p>他独自笨拙地整理着床铺，独自为缺少的物资而发愁、奔波。他不善长打交道，面对一群“外地人”的追问，他只能木讷地笑笑。</p><p>他曾想要当一名好军训学员，可他今天却晕晕地发烧病倒了。</p><p>他曾以为“只要能吃就行”，可他吃下麻婆豆腐后嗓子被辣哑了。</p><p>他曾想为家里省下买书钱而一人劳碌了半天，可他的努力被“买书只能买一整套”的公告给撕碎了。</p><p>椰子树的身影不再，迎面而来的是挺拔的松、杉、柏木；南方的口音不再，四周充满着升调的北方口音；熟悉的朋友们不再，只能一个人慢慢地摸爬滚打……</p><p>“等待我的是什么呢？”他心想，“是将来有可能挂科的数学，内卷的焦虑，还是就业升学的彷徨?亦或者是各种生活上的烦恼……”</p><p>酸痛麻木的四肢和眩晕的大脑不允许他继续想下去了。梦里，他和曾经朝夕相伴的基友们一起，躺在小叶榄仁下，痴痴地望着天上的白云，看它们懒洋洋地<strong>聚拢、舒展，和飘散……</strong><br><a href="https://imgse.com/i/pAEFRbD"><img src="https://s21.ax1x.com/2024/08/30/pAEFRbD.jpg" alt="pAEFRbD.jpg"></a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二周目无伤游行大师</title>
    <link href="/posts/5fcdfef9/"/>
    <url>/posts/5fcdfef9/</url>
    
    <content type="html"><![CDATA[<p><strong>二周目无伤游行大师，也算是了结了类魂从未过无伤的遗憾。</strong></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"> <iframe src="https://player.bilibili.com/player.html?isOutside=true&amp;aid=113001042546265&amp;bvid=BV1atWMeFENn&amp;cid=500001657555076&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lies of p</tag>
      
      <tag>游戏时刻</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于存在主义的一点思考</title>
    <link href="/posts/Infinity/"/>
    <url>/posts/Infinity/</url>
    
    <content type="html"><![CDATA[<h2 id="人生的意义是什么？"><a href="#人生的意义是什么？" class="headerlink" title="人生的意义是什么？"></a>人生的意义是什么？</h2><h3 id="·人一无所有地来到这个世界上，成为万千生灵中的沧海一粟，除了存在别无其他。这是，人的本质仅仅是人。随着时间，人民会成长，也被附加了一系列的可能：子女，学生，职员，父母…-而本质又是由人本身决定的。人可以自由地选择自己的人生和活法，从而重新拥有被重新定义的机会。人不同于工具，对工具而言，在物件被铸造成形之前就被人在图纸上决定了本质，一块铁锭的本质就是剪刀。但人不一样，先是生命的存在，再是本质的定义，即“存在先于本质”。存在的本身是重复，我们在社会的法则中按部就班，两点一线，朝九晚五，成为了流水线上的一枚螺丝钉，在无尽的重复中，存在的意义开始淡化，最后彻底消失，同理，由无数存在组成的世界也是无意义的。而实际上，对个体而言，存在是无意义的，却也不需要意义，因为它凌驾于意义之上。"><a href="#·人一无所有地来到这个世界上，成为万千生灵中的沧海一粟，除了存在别无其他。这是，人的本质仅仅是人。随着时间，人民会成长，也被附加了一系列的可能：子女，学生，职员，父母…-而本质又是由人本身决定的。人可以自由地选择自己的人生和活法，从而重新拥有被重新定义的机会。人不同于工具，对工具而言，在物件被铸造成形之前就被人在图纸上决定了本质，一块铁锭的本质就是剪刀。但人不一样，先是生命的存在，再是本质的定义，即“存在先于本质”。存在的本身是重复，我们在社会的法则中按部就班，两点一线，朝九晚五，成为了流水线上的一枚螺丝钉，在无尽的重复中，存在的意义开始淡化，最后彻底消失，同理，由无数存在组成的世界也是无意义的。而实际上，对个体而言，存在是无意义的，却也不需要意义，因为它凌驾于意义之上。" class="headerlink" title="·人一无所有地来到这个世界上，成为万千生灵中的沧海一粟，除了存在别无其他。这是，人的本质仅仅是人。随着时间，人民会成长，也被附加了一系列的可能：子女，学生，职员，父母….而本质又是由人本身决定的。人可以自由地选择自己的人生和活法，从而重新拥有被重新定义的机会。人不同于工具，对工具而言，在物件被铸造成形之前就被人在图纸上决定了本质，一块铁锭的本质就是剪刀。但人不一样，先是生命的存在，再是本质的定义，即“存在先于本质”。存在的本身是重复，我们在社会的法则中按部就班，两点一线，朝九晚五，成为了流水线上的一枚螺丝钉，在无尽的重复中，存在的意义开始淡化，最后彻底消失，同理，由无数存在组成的世界也是无意义的。而实际上，对个体而言，存在是无意义的，却也不需要意义，因为它凌驾于意义之上。"></a>·人一无所有地来到这个世界上，成为万千生灵中的沧海一粟，除了存在别无其他。这是，人的本质仅仅是人。随着时间，人民会成长，也被附加了一系列的可能：子女，学生，职员，父母….而本质又是由人本身决定的。人可以自由地选择自己的人生和活法，从而重新拥有被重新定义的机会。人不同于工具，对工具而言，在物件被铸造成形之前就被人在图纸上决定了本质，一块铁锭的本质就是剪刀。但人不一样，先是生命的存在，再是本质的定义，即“存在先于本质”。存在的本身是重复，我们在社会的法则中按部就班，两点一线，朝九晚五，成为了流水线上的一枚螺丝钉，在无尽的重复中，存在的意义开始淡化，最后彻底消失，同理，由无数存在组成的世界也是无意义的。而实际上，对个体而言，存在是无意义的，却也不需要意义，因为它凌驾于意义之上。</h3><h3 id="·人的存在分为肉体和意识两部分，意识无时不刻观察下着肉体，而肉体又在不断变化，二者的分离存在不可否认，但意识无法做到苏格拉底的“认识你自己”。正如加缪所说：“我与我的灵魂之间是如此遥远，而我的存在又是如此真实。”"><a href="#·人的存在分为肉体和意识两部分，意识无时不刻观察下着肉体，而肉体又在不断变化，二者的分离存在不可否认，但意识无法做到苏格拉底的“认识你自己”。正如加缪所说：“我与我的灵魂之间是如此遥远，而我的存在又是如此真实。”" class="headerlink" title="·人的存在分为肉体和意识两部分，意识无时不刻观察下着肉体，而肉体又在不断变化，二者的分离存在不可否认，但意识无法做到苏格拉底的“认识你自己”。正如加缪所说：“我与我的灵魂之间是如此遥远，而我的存在又是如此真实。”"></a>·人的存在分为肉体和意识两部分，意识无时不刻观察下着肉体，而肉体又在不断变化，二者的分离存在不可否认，但意识无法做到苏格拉底的“认识你自己”。正如加缪所说：“我与我的灵魂之间是如此遥远，而我的存在又是如此真实。”</h3><h3 id="·人是理性的，而世界是非理性的。人可以利用规则去认知规则之外的事，而人与人在一起，就组成一个无序，混乱而非理性的“荒诞”世界：明明可以和平共处，而没有正邪之分的战争却带来的断肢和弹坑；明明合作就能共赢，非得卷的你死我活；有太多的善人遭到报应，有太多的恶人得到的善终，世界的荒诞造就了生活这团无意义，无逻辑，从充满偶然和不公的”虚无“。人们在重复中度过生命，想西西弗推向山顶的巨石。人们在一如既往的重复中开始怀疑人生的意义，而那位伟大的反抗者与创造者的故事就此开始。"><a href="#·人是理性的，而世界是非理性的。人可以利用规则去认知规则之外的事，而人与人在一起，就组成一个无序，混乱而非理性的“荒诞”世界：明明可以和平共处，而没有正邪之分的战争却带来的断肢和弹坑；明明合作就能共赢，非得卷的你死我活；有太多的善人遭到报应，有太多的恶人得到的善终，世界的荒诞造就了生活这团无意义，无逻辑，从充满偶然和不公的”虚无“。人们在重复中度过生命，想西西弗推向山顶的巨石。人们在一如既往的重复中开始怀疑人生的意义，而那位伟大的反抗者与创造者的故事就此开始。" class="headerlink" title="·人是理性的，而世界是非理性的。人可以利用规则去认知规则之外的事，而人与人在一起，就组成一个无序，混乱而非理性的“荒诞”世界：明明可以和平共处，而没有正邪之分的战争却带来的断肢和弹坑；明明合作就能共赢，非得卷的你死我活；有太多的善人遭到报应，有太多的恶人得到的善终，世界的荒诞造就了生活这团无意义，无逻辑，从充满偶然和不公的”虚无“。人们在重复中度过生命，想西西弗推向山顶的巨石。人们在一如既往的重复中开始怀疑人生的意义，而那位伟大的反抗者与创造者的故事就此开始。"></a>·人是理性的，而世界是非理性的。人可以利用规则去认知规则之外的事，而人与人在一起，就组成一个无序，混乱而非理性的“荒诞”世界：明明可以和平共处，而没有正邪之分的战争却带来的断肢和弹坑；明明合作就能共赢，非得卷的你死我活；有太多的善人遭到报应，有太多的恶人得到的善终，世界的荒诞造就了生活这团无意义，无逻辑，从充满偶然和不公的”虚无“。人们在重复中度过生命，想西西弗推向山顶的巨石。人们在一如既往的重复中开始怀疑人生的意义，而那位伟大的反抗者与创造者的故事就此开始。</h3><h3 id="·人生的虚无，世界的荒诞需要由意识来拯救。我们的肉体跟随着我们的意识做的每一件能让我们感到快乐的事，都是有价值的，都是对“意义”的伟大创造，也是对虚无人生的反抗。意识的存在让我们卸下高雅的伪装，回归最本质的快乐，而不用在于他人的目光。我们是通过自己建立起来的自己，而不是通过他人建立起来的自己，我们完全可以拒绝他人对我们的影响，活的真实，自在。"><a href="#·人生的虚无，世界的荒诞需要由意识来拯救。我们的肉体跟随着我们的意识做的每一件能让我们感到快乐的事，都是有价值的，都是对“意义”的伟大创造，也是对虚无人生的反抗。意识的存在让我们卸下高雅的伪装，回归最本质的快乐，而不用在于他人的目光。我们是通过自己建立起来的自己，而不是通过他人建立起来的自己，我们完全可以拒绝他人对我们的影响，活的真实，自在。" class="headerlink" title="·人生的虚无，世界的荒诞需要由意识来拯救。我们的肉体跟随着我们的意识做的每一件能让我们感到快乐的事，都是有价值的，都是对“意义”的伟大创造，也是对虚无人生的反抗。意识的存在让我们卸下高雅的伪装，回归最本质的快乐，而不用在于他人的目光。我们是通过自己建立起来的自己，而不是通过他人建立起来的自己，我们完全可以拒绝他人对我们的影响，活的真实，自在。"></a>·人生的虚无，世界的荒诞需要由意识来拯救。我们的肉体跟随着我们的意识做的每一件能让我们感到快乐的事，都是有价值的，都是对“意义”的伟大创造，也是对虚无人生的反抗。意识的存在让我们卸下高雅的伪装，回归最本质的快乐，而不用在于他人的目光。我们是通过自己建立起来的自己，而不是通过他人建立起来的自己，我们完全可以拒绝他人对我们的影响，活的真实，自在。</h3><h3 id="·“重要的不是治愈，而是带着病痛活下去。”荒谬是起点，而对抗荒谬的是反抗，在重复的人生中追随意识创造意义，就是对虚无最大的反击。别再懊恼过去的错误，别再沉迷于虚无缥缈的未来。活在当下，自认为有意义地消耗每一个小时，爱生活的本身，而不是爱生活的意义。"><a href="#·“重要的不是治愈，而是带着病痛活下去。”荒谬是起点，而对抗荒谬的是反抗，在重复的人生中追随意识创造意义，就是对虚无最大的反击。别再懊恼过去的错误，别再沉迷于虚无缥缈的未来。活在当下，自认为有意义地消耗每一个小时，爱生活的本身，而不是爱生活的意义。" class="headerlink" title="·“重要的不是治愈，而是带着病痛活下去。”荒谬是起点，而对抗荒谬的是反抗，在重复的人生中追随意识创造意义，就是对虚无最大的反击。别再懊恼过去的错误，别再沉迷于虚无缥缈的未来。活在当下，自认为有意义地消耗每一个小时，爱生活的本身，而不是爱生活的意义。"></a>·“重要的不是治愈，而是带着病痛活下去。”荒谬是起点，而对抗荒谬的是反抗，在重复的人生中追随意识创造意义，就是对虚无最大的反击。别再懊恼过去的错误，别再沉迷于虚无缥缈的未来。活在当下，自认为有意义地消耗每一个小时，爱生活的本身，而不是爱生活的意义。</h3><h2 id="How-do-you-believe-How-do-you-live"><a href="#How-do-you-believe-How-do-you-live" class="headerlink" title="How do you believe How do you live."></a>How do you believe How do you live.</h2><h2 id="你怎样信仰-你就怎样生活"><a href="#你怎样信仰-你就怎样生活" class="headerlink" title="你怎样信仰 你就怎样生活"></a>你怎样信仰 你就怎样生活</h2>]]></content>
    
    
    <categories>
      
      <category>哲学思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【实战演练】：绕过Cloudflare获取网站真实IP</title>
    <link href="/posts/e39bfa4e/"/>
    <url>/posts/e39bfa4e/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>笔者暑假内卷累了，网上冲浪的时候发现了需求：</p><p><a href="https://imgse.com/i/pC7Bix1"><img src="https://s1.ax1x.com/2023/07/19/pC7Bix1.png" alt="pC7Bix1.png"></a>看起来还有一定的悬赏，所以试一试。<br>我已获得站长授权，属于合法测试。</p><h3 id="理论思路"><a href="#理论思路" class="headerlink" title="理论思路"></a>理论思路</h3><p>一个网站注定留下蛛丝马迹，具体思路可以是挖洞，搜索引擎（google hacking等），或者RSS邮箱泄密，我们试着第二种。<br>而对于三件套，这是用来查找在线服务的工具，就好比说shodan，与谷歌不同的，Shodan不是在网上搜索网址，而是直接进入互联网的背后通道。Shodan可以说是一款“黑暗”谷歌，一刻不停的在寻找着所有和互联网关联的服务器、摄像头、打印机、路由器等等。每个月Shodan都会在大约5亿个服务器上日夜不停地搜集信息。<br>信息收集————<a href="https://search.censys.io/">Censys</a>查DNS解析记录————网监三件套（<a href="https://www.shodan.io/">Shodan</a>，<a href="https://www.zoomeye.org/">钟馗之眼</a>，<a href="https://fofa.info/">Fofa</a>）————Nmap扫描端口————逐个排查————访问检验。</p><h3 id="实践开始"><a href="#实践开始" class="headerlink" title="实践开始"></a>实践开始</h3><p>测试目标：<a href="https://develxxxxx.com/%EF%BC%88%E4%BF%9D%E6%8A%A4%EF%BC%8C%E5%85%8D%E5%BE%97%E9%97%B2%E4%BA%BADDos%E6%90%9E%E4%BA%8B%EF%BC%89">https://develxxxxx.com/（保护，免得闲人DDos搞事）</a><br>笔者打开Censys，查了一波。<a href="https://imgse.com/i/pCTaDdH"><img src="https://s1.ax1x.com/2023/07/18/pCTaDdH.png" alt="pCTaDdH.png"></a>什么都没有<br>那就开三件套看看，我们首选Fofa，用起来方便些。先访问一下网站，出现了网站标题：<a href="https://imgse.com/i/pCTawLD"><img src="https://s1.ax1x.com/2023/07/18/pCTawLD.png" alt="pCTawLD.png"></a><br>看起来是一个Hexo的博客，那就以标题为切入点，在Fofa输入<code>title="Hexo" &amp;&amp; country="KR" &amp;&amp; region="Seoul"</code>弹出以下结果：<a href="https://imgse.com/i/pCTayFA"><img src="https://s1.ax1x.com/2023/07/18/pCTayFA.png" alt="pCTayFA.png"></a><br>很好，但一个个排查太浪费时间了，我们做一下<a href="https://port.hwcha.com/">端口扫描</a>，发现了一些开放端口，这会成为判断依据<a href="https://imgse.com/i/pCTaTFs"><img src="https://s1.ax1x.com/2023/07/18/pCTaTFs.png" alt="pCTaTFs.png"></a><br>将扫出来的端口键入搜索语句，有<code>title="Hexo" &amp;&amp; country="KR" &amp;&amp; region="Seoul" &amp;&amp; port="80"</code>这里调用80端口是因为其很常见，一般网站都会以此作为门户，得到了结果<a href="https://imgse.com/i/pCTarod"><img src="https://s1.ax1x.com/2023/07/18/pCTarod.png" alt="pCTarod.png"></a>发现158开头的很明显摆在了第二位，单机终端图标看看网站正文，发现了网站中相应的字样“主题，博主等”<a href="https://imgse.com/i/pCTdpk9"><img src="https://s1.ax1x.com/2023/07/18/pCTdpk9.png" alt="pCTdpk9.png"></a>，猜测得到验证，由此我们就得到了真实IP地址。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本站被暗黑引擎抓到了数据包，可能存在被绕过Cdn而Ddos攻击的风险。<br>感谢阅读！</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hacking</tag>
      
      <tag>网安</tag>
      
      <tag>Cloudflare</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Fluid中添加一言</title>
    <link href="/posts/7938d7d6/"/>
    <url>/posts/7938d7d6/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="一言-隶属于萌创团队，其初衷是为用户提供来自动漫，哲学，名著，游戏等来源的一句走心之言，分享对世界的理解和感受。"><a href="#一言-隶属于萌创团队，其初衷是为用户提供来自动漫，哲学，名著，游戏等来源的一句走心之言，分享对世界的理解和感受。" class="headerlink" title="一言,隶属于萌创团队，其初衷是为用户提供来自动漫，哲学，名著，游戏等来源的一句走心之言，分享对世界的理解和感受。"></a><a href="http://hitokoto.cn/">一言</a>,隶属于萌创团队，其初衷是为用户提供来自动漫，哲学，名著，游戏等来源的一句走心之言，分享对世界的理解和感受。</h3><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="一言可以增加博客的随机性和文学性，有利于丰富网站内容。"><a href="#一言可以增加博客的随机性和文学性，有利于丰富网站内容。" class="headerlink" title="一言可以增加博客的随机性和文学性，有利于丰富网站内容。"></a>一言可以增加博客的随机性和文学性，有利于丰富网站内容。</h3><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="在Fluid的主题配置”（指的是-theme-x2F-fluid-x2F-config-yml-或者-config-fluid-yml，这取决于你安装Fluid的方式）中找到（ctrl-F）Slogan打字机相关配置，将其改为如下配置"><a href="#在Fluid的主题配置”（指的是-theme-x2F-fluid-x2F-config-yml-或者-config-fluid-yml，这取决于你安装Fluid的方式）中找到（ctrl-F）Slogan打字机相关配置，将其改为如下配置" class="headerlink" title="在Fluid的主题配置”（指的是 theme/fluid/_config.yml 或者 _config.fluid.yml，这取决于你安装Fluid的方式）中找到（ctrl+F）Slogan打字机相关配置，将其改为如下配置;"></a>在Fluid的主题配置”（指的是 theme/fluid/_config.yml 或者 _config.fluid.yml，这取决于你安装Fluid的方式）中找到（<strong>ctrl+F</strong>）Slogan打字机相关配置，将其改为如下配置;</h3><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs autoit">slogan:<br>  enable: <span class="hljs-literal">true</span>       <span class="hljs-meta"># 改为true</span><br><br>  <span class="hljs-meta"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-meta"># If empty, text based on `subtitle` in hexo config</span><br>  text: <span class="hljs-string">"明眸如初，又见苍岚"</span>           <span class="hljs-meta">#写不写都可以</span><br><br>  <span class="hljs-meta"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span><br>  <span class="hljs-meta"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span><br>  api:<br>    enable: <span class="hljs-literal">true</span><br><br>    <span class="hljs-meta"># 请求地址</span><br>    <span class="hljs-meta"># Request url</span><br>    url: <span class="hljs-string">"https://v1.hitokoto.cn/"</span>            <span class="hljs-meta">#添加一言接口</span><br><br>    <span class="hljs-meta"># 请求方法</span><br>    <span class="hljs-meta"># Request method</span><br>    <span class="hljs-meta"># Available: GET | POST | PUT</span><br>    method: <span class="hljs-string">"GET"</span>                       <br><br>    <span class="hljs-meta"># 请求头</span><br>    <span class="hljs-meta"># Request headers</span><br>    headers: {}   <br><br>    <span class="hljs-meta"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 {<span class="hljs-string">"data"</span>: {<span class="hljs-string">"author"</span>: <span class="hljs-string">"fluid"</span>, <span class="hljs-string">"content"</span>: <span class="hljs-string">"An elegant theme"</span>}}, 则取值字段为 [<span class="hljs-string">'data'</span>, <span class="hljs-string">'content'</span>]；如果返回是列表则自动选择第一项</span><br>    <span class="hljs-meta"># The value field of the string obtained from the response. For example, the response content is {<span class="hljs-string">"data"</span>: {<span class="hljs-string">"author"</span>: <span class="hljs-string">"fluid"</span>, <span class="hljs-string">"content"</span>: <span class="hljs-string">"An elegant theme"</span>}}, the expected `keys: [<span class="hljs-string">'data'</span>,<span class="hljs-string">'content'</span>]`<span class="hljs-comment">; if the return is a list, the first item is automatically selected</span></span><br>    keys: [<span class="hljs-string">'hitokoto'</span>]                    <span class="hljs-meta">#填写Keys</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="保存，键入hexo-clean-hexo-g-hexo-s-即可预览效果。"><a href="#保存，键入hexo-clean-hexo-g-hexo-s-即可预览效果。" class="headerlink" title="保存，键入hexo clean  hexo g hexo s 即可预览效果。"></a>保存，键入<code>hexo clean</code>  <code>hexo g</code> <code>hexo s </code>即可预览效果。</h3>]]></content>
    
    
    <categories>
      
      <category>博客折腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《百年孤独》：拉美的呻吟</title>
    <link href="/posts/986a860d/"/>
    <url>/posts/986a860d/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面：本文将从魔幻现实主义的巅峰，拉美的历史，马孔多的百年，孤独的意义四个板块介绍世界名著《百年孤独》。全文字数较多，建议分段阅读。参考书籍：马尔克斯《百年孤独》斯塔夫利阿诺斯《全球通史》，陆春祥《印加帝国陨落的隐喻》"><a href="#写在前面：本文将从魔幻现实主义的巅峰，拉美的历史，马孔多的百年，孤独的意义四个板块介绍世界名著《百年孤独》。全文字数较多，建议分段阅读。参考书籍：马尔克斯《百年孤独》斯塔夫利阿诺斯《全球通史》，陆春祥《印加帝国陨落的隐喻》" class="headerlink" title="写在前面：本文将从魔幻现实主义的巅峰，拉美的历史，马孔多的百年，孤独的意义四个板块介绍世界名著《百年孤独》。全文字数较多，建议分段阅读。参考书籍：马尔克斯《百年孤独》斯塔夫利阿诺斯《全球通史》，陆春祥《印加帝国陨落的隐喻》"></a>写在前面：本文将从魔幻现实主义的巅峰，<strong>拉美的历史</strong>，马孔多的百年，孤独的意义四个板块介绍世界名著《百年孤独》。全文字数较多，建议分段阅读。参考书籍：马尔克斯《百年孤独》斯塔夫利阿诺斯《全球通史》，陆春祥《印加帝国陨落的隐喻》</h1><h2 id="金句摘抄"><a href="#金句摘抄" class="headerlink" title="金句摘抄"></a>金句摘抄</h2><p><font face="华文新魏" color="black" size="6">        1.生命中曾经有过的所有灿烂，原来终究，都需要用寂寞来偿还。</font></p><font face="华文新魏" color="black" size="6"><p>2.无论走到哪里，都应该记住，过去都是假的，回忆是一条没有尽头的路。</p><p>3.生命中真正重要的不是你遭遇了什么，而是你记住了哪些事，又是如何铭记的。</p><p>4.买下一张永久车票，登上一列永无终点的火车。</p><p>5.只是觉得人的内心苦楚无法言说，人的很多举措无可奈何，百年一参透，百年一孤寂。</p><p>6.平庸将你的心灵烘干到没有一丝水分，然后荣光才会拨动你心灵最深处的弦。</p><p>7.预感总是悠然来临，灵光一现，好像一种确凿无疑的信念在瞬间萌生却无从捕捉。</p><p>8.往日的推心置腹已经一去不返，同谋和交流变成敌意与缄默。</p><p>9.过去都是假的，回忆没有归路，春天总是一去不返，最疯狂执着的爱情也终究是过眼云烟。</p><p>10.很多人选择了向虚拟现实的魅力屈服，寄情于自我幻想，这纵然不切实际却更能与人安慰。</p><p>11.我们趋行在人生这个更古的旅途，在坎坷中奔跑，在挫折里涅盘忧愁缠满全身，痛苦飘洒一地我们累，却无从止歇；我们苦，却无法回避。</p><p>12.战争已经被扔进了存放悲惨记忆的高阁它仅仅在开启香槟酒的砰砰爆气里被偶尔提到。</p><p>13.此时微风初起；风中充盈着过往的群声喊喳，日日天竺葵的呢喃，无法排遣的怀念来临前的失望叹息。</p><p>14.一个幸福晚年的秘诀不是别的，而是与孤寂签订一个体面的协定。</p><p>15.一分钟的和好抵得过一辈子的友谊。</p><p>16.寂寞是造化对群居者的诅咒，孤独才是寂寞唯一出口。</p><p>17.多年以后，面对行刑队</p><p>奥雷里亚诺·布恩迪亚上校将会回想起父亲带他</p><p>去见识冰块的那个遥远的下午。</p><p>18.原来时间也会失误和出现意外，并因此迸裂，在某个房间留下永恒的片段。</p><p>19.死神一直追随他的脚步。嗅闻他的行踪，但尚未下定决心，给他最后一击。</p><p>20.“奥雷里亚诺”，他悲伤地敲下发报键，“马孔多在下雨。”</p><p>21.生命从来不曾离开过孤独而独立存在。无论是我们出生、我们成长、</p><p>22.我们相爱还是我们成功失败</p><p>直到最后的最后</p><p>孤独犹如影子一样存在于生命一隅。</p><p>羊皮卷上所载一切</p><p>自永远至永远不会在重复，</p><p>因为注定经受百年孤独的家族</p><p>不会有第二次机会在大地上出现。</p></font><p><font face="华文新魏" color="black" size="6">不到一百年，就不该有人知道其中的含义。<br></font></p><h2 id="魔幻现实主义的巅峰"><a href="#魔幻现实主义的巅峰" class="headerlink" title="魔幻现实主义的巅峰"></a>魔幻现实主义的巅峰</h2><p><font face="华文新魏" color="black" size="6"><img src="https://s1.ax1x.com/2022/08/13/vNtcFJ.jpg" alt="image"><br>《百年孤独》是哥伦比亚作家加西亚·马尔克斯创作的长篇小说，是其代表作，也是拉丁美洲魔幻现实主义文学的代表作，被誉为“再现拉丁美洲历史社会图景的鸿篇巨著””魔幻现实主义的巅峰之作“。<br>什么是魔幻现实主义？魔幻现实主义指的是20世纪的一种绘画，这种绘画用现实主义（REALISM）的精确来描绘物体，但是却悖论般地表现出一种由于对时空因素进行迥然不同的并置所致的奇异的效果，后继而成为一种文学艺术形式。魔幻现实主义来自于拉美，在黑暗的殖民统治下，这种表现手法被广泛用于揭露社会弊端，抨击社会现实，是顺应历史之流的产物。</font></p><hr><h2 id="拉美的历史"><a href="#拉美的历史" class="headerlink" title="拉美的历史"></a>拉美的历史</h2><p><font face="华文新魏" color="black" size="6">美洲坐落于世界西方，是世界上自然条件最为优越的大陆之一。它有着锯齿形的海岸线和大流量的运河。五大湖为森林提供了充足的水源，原始的自然环境为繁多的动植物提供了居所，全大陆地形较为平整，适宜居住。<br>据考察，3万年前，来自西伯利亚的人们穿过白令海来到阿拉斯加，成为了开垦美洲的先驱者。即使早期移民来自于经济不发达的地区，但经过数千年的耕耘，美洲印第安人发展了丰富多彩的种种文化，其中包括2000种截然不同的文字和不同形式的耕作制度。此外，印第安人培育了100多种植物，其中的南瓜,玉米，可可，花生在现代都是极为重要的作物。<br>美洲印第安人逐渐形成了三大文明：玛雅文明，阿兹特克文明和印加文明。<br>15世纪，哥伦布的船队发现了美洲，就此带来了枪炮，战争，掠夺，动荡和拉美的伤口。石质砍刀对上火枪和战马，倒下的只有印第安人的尸体。尸横遍野，印第安人试图用发达的宗教和文化掩盖技术上落后的事实，但西方人的炮火始终没有停止咆哮。<br>仅仅一小群冒险者就可以轻易推翻和根除三大文明，技术压制当然不是唯一因素。另外一个因素是，反抗的一方缺乏最起码的团结。被夹在两大洋之间的美洲不具备跨过大海与其他文明交流的能力，甚至各印第安文明之间也缺乏交流，因此没有相互影响.</font></p><font face="华文新魏" color="black" size="6"><blockquote><p>关于秘鲁和中美洲之间的相互关系，完全可以说，人们已经承认，在从形成期到西班牙人入侵这段漫长的时期内，所有证明这些地区之间存在着相互联系的实物或记录都是不可靠的。</p></blockquote></font><p><font face="华文新魏" color="black" size="6">硝烟过后，殖民者开始切割美洲的血管，用血腥的手去夺取血腥的财宝。欧洲列强对拉丁美洲实行了三次掠夺。<br>一是直接性掠夺：<br>1532年9月，殖民者皮萨罗对印加帝国发动战争，俘获了国王阿塔瓦尔帕，勒索了数万磅的真金白银。得到百分之二十分成的西班牙王室又加大战争拨款，给拉美的财富给予重创。手持枪炮的士兵把拉美的金银送到欧洲贵族的腰包里，用来装裱他们的城堡。<br>二是土地掠夺：在榨干拉美的金银之后，英国开始进行三角贸易，从非洲拉来的黑奴在拉美的土地上种植香蕉，烟草等让西方贵族满意的商品，再运到欧洲大肆出售。土地的过度利用和粮食作物的稀缺使拉美人民苦不堪言。<br>三是经济掠夺：长期被列强统治的拉美根本没有发展工业的机会，拉美就不可能制作自己的工艺品。而美洲人民只好依赖出口低级农产品勉强过活，但却不得不用十倍以上的价格买回欧洲的工艺品，列强的资本输出使得美洲更加贫困。<br>拉美的文明在外来侵略的浪潮中愈加贫困，丧失了出路和希望。</font></p><hr><h2 id="马孔多的百年"><a href="#马孔多的百年" class="headerlink" title="马孔多的百年"></a>马孔多的百年</h2><p><font face="华文新魏" color="black" size="6">《百年孤独》讲述了以何塞·阿尔卡蒂奥·布恩迪亚为首的乡亲在荒野之中开辟新家园“马孔多”的故事。随时代的改变，马孔多先后经历了兴盛与衰败，贫苦与富足，安定与动乱，繁华与死寂。而布恩迪亚家族的故事也在飓风的呼啸声和蚂蚁的啃咬声中走到了尽头，”一场突如其来的飓风把整个儿马孔多镇从地球上刮走，从此这个村镇就永远地消失了。</font></p><h2 id="孤独的意义"><a href="#孤独的意义" class="headerlink" title="孤独的意义"></a>孤独的意义</h2><p>  <font face="华文新魏" color="black" size="5">作者马尔克斯出生于哥伦比亚，他在见证了拉美令人哭泣和绝望的历史后写下了这部荒诞的家族史，因此，《百年孤独》很大程度上是拉美历史的缩影。从何塞·阿尔卡蒂奥·布恩迪亚的玻璃城市梦境和布恩迪亚家族的抗争史中可知，《百年孤独》的主题便是孤独与绝望，孤独在绝望中愈演愈烈，绝望在孤独中肆意生长。<br>   孤独这一主题是在书中的描写中揭示的。书中极少对家族成员之间的交流进行描写，展示在我们面前的好像是一个没有感情，没有信任，没有了解的可悲家庭。孤独是布恩迪亚家族的家徽，每位家庭成员不由自主地佩戴它，而他们在试图摆脱孤独时又被孤独束缚住了手脚，最后的结果不是在无尽的空虚中了结了自己就是再次被扔回到孤独的深海中去，家族的创始人何塞·阿尔卡蒂奥·布恩迪亚晚年因为思想守旧，在面对新事物时又被孤独击败，疯癫地成为树下的可怜虫；奥雷里亚诺上校一生经历了32场战争，遭遇14次暗杀，73次埋伏，后因战争的不明意义试图开枪自杀。<br>    绝望来自于失败，而失败源于抗争，布恩迪亚家族史可以说是一部抗争史。在故事的开始，夫妻二人就为了逃避骂声和偏见而开辟马孔多；后人又在为了某些东旭（尊严，自由，金钱）而抗争。上校起初以自由为口号发动战争，后才发觉自己是在用权力和战火掩饰自己的胆怯，仅仅是为了尊严而开枪；何塞·阿尔卡蒂奥第二引领工人运动，为工人利益而斗争······而这些英雄般的斗争，也最终迎来了结局：自由党上校的全线投降和3000名工人横七竖八的尸体···，人们在失败中绝望，在绝望中更加孤独。但有一人例外，与孤独斗争许久的乌尔苏拉被认为是家族精神的代表，她竭力反抗，想尽一切办法联合家族和马孔多，但依然没有成效和出路，最终在晚年被岁月追上，化作尘土。<br> 书中有两个值得注意的细节：一是上校的同僚马尔克斯上校与作者同名。像对马孔多一样，马尔克斯也见证了拉美的历史。却又对苟延残喘的拉美爱莫能助。二是家族中重复命名的每一代人都没有重复上一代人所做的事，但都无一例外地迎来了失败的结局。<br> 本书最大的手法就是以小见大，马孔多已不仅仅是荒野中的一个小镇，更是整个拉美文明的代表。同时拥有富饶的自然资源和广大贫苦人民的拉美是畸形的，也是可悲的。鲁迅说：“悲剧就是将有价值的东西毁灭给人看。”西方殖民者三次掠夺美洲，以枪炮掏空美洲的内脏，压迫着拉美的人民。面对外来文化，拉美人民不是没有抗争过，而是像书中的重复命名一样：尽管方式各不相同，但最终躲不开封建主义和资本主义的打击，逃不掉失败的命运。这也许就是为什么羊皮卷上写的：“家族的第一个人被绑在树上死去，最后一个人被蚂蚁吃掉。”有如此强的宿命感。黑格尔说：“人类从历史中学到的唯一教训，就是没有从历史中吸取到任何教训。”书中“失眠症”的后果就是失忆。拉美越来越多年轻人开始忘记拉美那段屈辱而血腥的历史，再加上在少数人的别有用心，拉美的历史逐渐不被人提起，成为历史的悲剧。</font><br> <font face="华文新魏" color="black" size="6">马尔克斯上校看着窗外的大雨说：“马孔多在下雨。”这场雨到现在都没有停，而真正造成在场雨的人不知道，也不在乎。</font></p>]]></content>
    
    
    <categories>
      
      <category>拾遗阁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Book</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
